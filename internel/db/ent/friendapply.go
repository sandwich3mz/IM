// Code generated by ent, DO NOT EDIT.

package ent

import (
	"IM/internel/db/ent/friendapply"
	"IM/internel/db/ent/user"
	"IM/internel/types/enums"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FriendApply is the model entity for the FriendApply schema.
type FriendApply struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 申请发起人 ID
	FromUserID int64 `json:"from_user_id,string"`
	// 申请发起人昵称
	FromNickname string `json:"from_nickname"`
	// 申请发起人头像
	FromFaceURL string `json:"from_face_url"`
	// 申请接收人 ID
	ToUserID int64 `json:"to_user_id,string"`
	// 申请接收人 昵称
	ToFaceURL string `json:"to_face_url"`
	// 申请接收人 头像
	ToNickname string `json:"to_nickname"`
	// 处理结果
	Result enums.ApplyType `json:"result"`
	// 请求信息
	ReqMsg string `json:"req_msg"`
	// 群组 ID
	GroupID int64 `json:"group_id,string"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FriendApplyQuery when eager-loading is set.
	Edges        FriendApplyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FriendApplyEdges holds the relations/edges for other nodes in the graph.
type FriendApplyEdges struct {
	// FromUser holds the value of the from_user edge.
	FromUser *User `json:"from_user,omitempty"`
	// ToUser holds the value of the to_user edge.
	ToUser *User `json:"to_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FromUserOrErr returns the FromUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FriendApplyEdges) FromUserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.FromUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.FromUser, nil
	}
	return nil, &NotLoadedError{edge: "from_user"}
}

// ToUserOrErr returns the ToUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FriendApplyEdges) ToUserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.ToUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.ToUser, nil
	}
	return nil, &NotLoadedError{edge: "to_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FriendApply) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case friendapply.FieldID, friendapply.FieldFromUserID, friendapply.FieldToUserID, friendapply.FieldGroupID:
			values[i] = new(sql.NullInt64)
		case friendapply.FieldFromNickname, friendapply.FieldFromFaceURL, friendapply.FieldToFaceURL, friendapply.FieldToNickname, friendapply.FieldResult, friendapply.FieldReqMsg:
			values[i] = new(sql.NullString)
		case friendapply.FieldCreatedAt, friendapply.FieldUpdatedAt, friendapply.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FriendApply fields.
func (fa *FriendApply) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case friendapply.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fa.ID = int64(value.Int64)
		case friendapply.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fa.CreatedAt = value.Time
			}
		case friendapply.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fa.UpdatedAt = value.Time
			}
		case friendapply.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fa.DeletedAt = value.Time
			}
		case friendapply.FieldFromUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_user_id", values[i])
			} else if value.Valid {
				fa.FromUserID = value.Int64
			}
		case friendapply.FieldFromNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_nickname", values[i])
			} else if value.Valid {
				fa.FromNickname = value.String
			}
		case friendapply.FieldFromFaceURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_face_url", values[i])
			} else if value.Valid {
				fa.FromFaceURL = value.String
			}
		case friendapply.FieldToUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field to_user_id", values[i])
			} else if value.Valid {
				fa.ToUserID = value.Int64
			}
		case friendapply.FieldToFaceURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to_face_url", values[i])
			} else if value.Valid {
				fa.ToFaceURL = value.String
			}
		case friendapply.FieldToNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to_nickname", values[i])
			} else if value.Valid {
				fa.ToNickname = value.String
			}
		case friendapply.FieldResult:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value.Valid {
				fa.Result = enums.ApplyType(value.String)
			}
		case friendapply.FieldReqMsg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field req_msg", values[i])
			} else if value.Valid {
				fa.ReqMsg = value.String
			}
		case friendapply.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				fa.GroupID = value.Int64
			}
		default:
			fa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FriendApply.
// This includes values selected through modifiers, order, etc.
func (fa *FriendApply) Value(name string) (ent.Value, error) {
	return fa.selectValues.Get(name)
}

// QueryFromUser queries the "from_user" edge of the FriendApply entity.
func (fa *FriendApply) QueryFromUser() *UserQuery {
	return NewFriendApplyClient(fa.config).QueryFromUser(fa)
}

// QueryToUser queries the "to_user" edge of the FriendApply entity.
func (fa *FriendApply) QueryToUser() *UserQuery {
	return NewFriendApplyClient(fa.config).QueryToUser(fa)
}

// Update returns a builder for updating this FriendApply.
// Note that you need to call FriendApply.Unwrap() before calling this method if this FriendApply
// was returned from a transaction, and the transaction was committed or rolled back.
func (fa *FriendApply) Update() *FriendApplyUpdateOne {
	return NewFriendApplyClient(fa.config).UpdateOne(fa)
}

// Unwrap unwraps the FriendApply entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fa *FriendApply) Unwrap() *FriendApply {
	_tx, ok := fa.config.driver.(*txDriver)
	if !ok {
		panic("ent: FriendApply is not a transactional entity")
	}
	fa.config.driver = _tx.drv
	return fa
}

// String implements the fmt.Stringer.
func (fa *FriendApply) String() string {
	var builder strings.Builder
	builder.WriteString("FriendApply(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fa.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fa.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("from_user_id=")
	builder.WriteString(fmt.Sprintf("%v", fa.FromUserID))
	builder.WriteString(", ")
	builder.WriteString("from_nickname=")
	builder.WriteString(fa.FromNickname)
	builder.WriteString(", ")
	builder.WriteString("from_face_url=")
	builder.WriteString(fa.FromFaceURL)
	builder.WriteString(", ")
	builder.WriteString("to_user_id=")
	builder.WriteString(fmt.Sprintf("%v", fa.ToUserID))
	builder.WriteString(", ")
	builder.WriteString("to_face_url=")
	builder.WriteString(fa.ToFaceURL)
	builder.WriteString(", ")
	builder.WriteString("to_nickname=")
	builder.WriteString(fa.ToNickname)
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(fmt.Sprintf("%v", fa.Result))
	builder.WriteString(", ")
	builder.WriteString("req_msg=")
	builder.WriteString(fa.ReqMsg)
	builder.WriteString(", ")
	builder.WriteString("group_id=")
	builder.WriteString(fmt.Sprintf("%v", fa.GroupID))
	builder.WriteByte(')')
	return builder.String()
}

// FriendApplies is a parsable slice of FriendApply.
type FriendApplies []*FriendApply
