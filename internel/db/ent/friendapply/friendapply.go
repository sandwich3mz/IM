// Code generated by ent, DO NOT EDIT.

package friendapply

import (
	"IM/internel/types/enums"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the friendapply type in the database.
	Label = "friend_apply"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldFromUserID holds the string denoting the from_user_id field in the database.
	FieldFromUserID = "from_user_id"
	// FieldFromNickname holds the string denoting the from_nickname field in the database.
	FieldFromNickname = "from_nickname"
	// FieldFromFaceURL holds the string denoting the from_face_url field in the database.
	FieldFromFaceURL = "from_face_url"
	// FieldToUserID holds the string denoting the to_user_id field in the database.
	FieldToUserID = "to_user_id"
	// FieldToFaceURL holds the string denoting the to_face_url field in the database.
	FieldToFaceURL = "to_face_url"
	// FieldToNickname holds the string denoting the to_nickname field in the database.
	FieldToNickname = "to_nickname"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// FieldReqMsg holds the string denoting the req_msg field in the database.
	FieldReqMsg = "req_msg"
	// FieldGroupID holds the string denoting the group_id field in the database.
	FieldGroupID = "group_id"
	// EdgeFromUser holds the string denoting the from_user edge name in mutations.
	EdgeFromUser = "from_user"
	// EdgeToUser holds the string denoting the to_user edge name in mutations.
	EdgeToUser = "to_user"
	// Table holds the table name of the friendapply in the database.
	Table = "t_friend_apply"
	// FromUserTable is the table that holds the from_user relation/edge.
	FromUserTable = "t_friend_apply"
	// FromUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	FromUserInverseTable = "t_user"
	// FromUserColumn is the table column denoting the from_user relation/edge.
	FromUserColumn = "from_user_id"
	// ToUserTable is the table that holds the to_user relation/edge.
	ToUserTable = "t_friend_apply"
	// ToUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ToUserInverseTable = "t_user"
	// ToUserColumn is the table column denoting the to_user relation/edge.
	ToUserColumn = "to_user_id"
)

// Columns holds all SQL columns for friendapply fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldFromUserID,
	FieldFromNickname,
	FieldFromFaceURL,
	FieldToUserID,
	FieldToFaceURL,
	FieldToNickname,
	FieldResult,
	FieldReqMsg,
	FieldGroupID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultResult holds the default value on creation for the "result" field.
	DefaultResult enums.ApplyType
	// DefaultReqMsg holds the default value on creation for the "req_msg" field.
	DefaultReqMsg string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

// OrderOption defines the ordering options for the FriendApply queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByFromUserID orders the results by the from_user_id field.
func ByFromUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromUserID, opts...).ToFunc()
}

// ByFromNickname orders the results by the from_nickname field.
func ByFromNickname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromNickname, opts...).ToFunc()
}

// ByFromFaceURL orders the results by the from_face_url field.
func ByFromFaceURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromFaceURL, opts...).ToFunc()
}

// ByToUserID orders the results by the to_user_id field.
func ByToUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToUserID, opts...).ToFunc()
}

// ByToFaceURL orders the results by the to_face_url field.
func ByToFaceURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToFaceURL, opts...).ToFunc()
}

// ByToNickname orders the results by the to_nickname field.
func ByToNickname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToNickname, opts...).ToFunc()
}

// ByResult orders the results by the result field.
func ByResult(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResult, opts...).ToFunc()
}

// ByReqMsg orders the results by the req_msg field.
func ByReqMsg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReqMsg, opts...).ToFunc()
}

// ByGroupID orders the results by the group_id field.
func ByGroupID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupID, opts...).ToFunc()
}

// ByFromUserField orders the results by from_user field.
func ByFromUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFromUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByToUserField orders the results by to_user field.
func ByToUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newToUserStep(), sql.OrderByField(field, opts...))
	}
}
func newFromUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FromUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FromUserTable, FromUserColumn),
	)
}
func newToUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ToUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ToUserTable, ToUserColumn),
	)
}
