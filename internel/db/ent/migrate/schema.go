// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// TFriendColumns holds the columns for the "t_friend" table.
	TFriendColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Comment: "19 位雪花 ID"},
		{Name: "created_at", Type: field.TypeTime, Comment: "创建时刻，带时区"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "更新时刻，带时区"},
		{Name: "deleted_at", Type: field.TypeTime, Comment: "软删除时刻，带时区"},
		{Name: "relationship", Type: field.TypeInt8, Comment: "用户关系"},
		{Name: "remark", Type: field.TypeString, Comment: "好友备注"},
		{Name: "last_talk_at", Type: field.TypeTime, Comment: "最后交谈时间"},
		{Name: "group_id", Type: field.TypeInt64, Comment: "好友分组 ID"},
		{Name: "owner_user_id", Type: field.TypeInt64, Comment: "当前登录用户 ID"},
		{Name: "friend_user_id", Type: field.TypeInt64, Comment: "好友 ID"},
	}
	// TFriendTable holds the schema information for the "t_friend" table.
	TFriendTable = &schema.Table{
		Name:       "t_friend",
		Columns:    TFriendColumns,
		PrimaryKey: []*schema.Column{TFriendColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "t_friend_t_friend_group_friends",
				Columns:    []*schema.Column{TFriendColumns[7]},
				RefColumns: []*schema.Column{TFriendGroupColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "t_friend_t_user_owner_user_friend",
				Columns:    []*schema.Column{TFriendColumns[8]},
				RefColumns: []*schema.Column{TUserColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "t_friend_t_user_friend_user_friend",
				Columns:    []*schema.Column{TFriendColumns[9]},
				RefColumns: []*schema.Column{TUserColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TFriendApplyColumns holds the columns for the "t_friend_apply" table.
	TFriendApplyColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Comment: "19 位雪花 ID"},
		{Name: "created_at", Type: field.TypeTime, Comment: "创建时刻，带时区"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "更新时刻，带时区"},
		{Name: "deleted_at", Type: field.TypeTime, Comment: "软删除时刻，带时区"},
		{Name: "from_nickname", Type: field.TypeString, Comment: "申请发起人昵称"},
		{Name: "from_face_url", Type: field.TypeString, Comment: "申请发起人头像"},
		{Name: "to_face_url", Type: field.TypeString, Comment: "申请接收人 昵称"},
		{Name: "to_nickname", Type: field.TypeString, Comment: "申请接收人 头像"},
		{Name: "result", Type: field.TypeString, Comment: "处理结果", Default: "pending"},
		{Name: "req_msg", Type: field.TypeString, Comment: "请求信息", Default: ""},
		{Name: "group_id", Type: field.TypeInt64, Comment: "群组 ID"},
		{Name: "from_user_id", Type: field.TypeInt64, Comment: "申请发起人 ID"},
		{Name: "to_user_id", Type: field.TypeInt64, Comment: "申请接收人 ID"},
	}
	// TFriendApplyTable holds the schema information for the "t_friend_apply" table.
	TFriendApplyTable = &schema.Table{
		Name:       "t_friend_apply",
		Columns:    TFriendApplyColumns,
		PrimaryKey: []*schema.Column{TFriendApplyColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "t_friend_apply_t_user_send_apply_user",
				Columns:    []*schema.Column{TFriendApplyColumns[11]},
				RefColumns: []*schema.Column{TUserColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "t_friend_apply_t_user_apply_user",
				Columns:    []*schema.Column{TFriendApplyColumns[12]},
				RefColumns: []*schema.Column{TUserColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TFriendGroupColumns holds the columns for the "t_friend_group" table.
	TFriendGroupColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Comment: "19 位雪花 ID"},
		{Name: "created_at", Type: field.TypeTime, Comment: "创建时刻，带时区"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "更新时刻，带时区"},
		{Name: "deleted_at", Type: field.TypeTime, Comment: "软删除时刻，带时区"},
		{Name: "group_name", Type: field.TypeString, Comment: "好友分组名称"},
		{Name: "owner_id", Type: field.TypeInt64, Comment: "分组所有者 ID"},
	}
	// TFriendGroupTable holds the schema information for the "t_friend_group" table.
	TFriendGroupTable = &schema.Table{
		Name:       "t_friend_group",
		Columns:    TFriendGroupColumns,
		PrimaryKey: []*schema.Column{TFriendGroupColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "t_friend_group_t_user_friend_group",
				Columns:    []*schema.Column{TFriendGroupColumns[5]},
				RefColumns: []*schema.Column{TUserColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TGroupColumns holds the columns for the "t_group" table.
	TGroupColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Comment: "19 位雪花 ID"},
		{Name: "created_at", Type: field.TypeTime, Comment: "创建时刻，带时区"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "更新时刻，带时区"},
		{Name: "deleted_at", Type: field.TypeTime, Comment: "软删除时刻，带时区"},
		{Name: "group_name", Type: field.TypeString, Comment: "群聊名称"},
		{Name: "notification", Type: field.TypeString, Comment: "群公告"},
		{Name: "relationship", Type: field.TypeInt8, Comment: "用户关系"},
		{Name: "face_url", Type: field.TypeString, Comment: "头像"},
		{Name: "count", Type: field.TypeInt64, Comment: "群员数量"},
		{Name: "owner_user_id", Type: field.TypeInt64, Comment: "群主 ID"},
	}
	// TGroupTable holds the schema information for the "t_group" table.
	TGroupTable = &schema.Table{
		Name:       "t_group",
		Columns:    TGroupColumns,
		PrimaryKey: []*schema.Column{TGroupColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "t_group_t_user_user_group",
				Columns:    []*schema.Column{TGroupColumns[9]},
				RefColumns: []*schema.Column{TUserColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TGroupMemberColumns holds the columns for the "t_group_member" table.
	TGroupMemberColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Comment: "19 位雪花 ID"},
		{Name: "created_at", Type: field.TypeTime, Comment: "创建时刻，带时区"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "更新时刻，带时区"},
		{Name: "deleted_at", Type: field.TypeTime, Comment: "软删除时刻，带时区"},
		{Name: "nickname", Type: field.TypeInt8, Comment: "群成员昵称"},
		{Name: "face_url", Type: field.TypeString, Comment: "头像"},
		{Name: "count", Type: field.TypeInt64, Comment: "群员数量"},
		{Name: "remark", Type: field.TypeString, Comment: "备注"},
		{Name: "group_id", Type: field.TypeInt64, Comment: "群 ID"},
		{Name: "user_id", Type: field.TypeInt64, Comment: "用户 ID"},
	}
	// TGroupMemberTable holds the schema information for the "t_group_member" table.
	TGroupMemberTable = &schema.Table{
		Name:       "t_group_member",
		Columns:    TGroupMemberColumns,
		PrimaryKey: []*schema.Column{TGroupMemberColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "t_group_member_t_group_group_member",
				Columns:    []*schema.Column{TGroupMemberColumns[8]},
				RefColumns: []*schema.Column{TGroupColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "t_group_member_t_user_user_group_member",
				Columns:    []*schema.Column{TGroupMemberColumns[9]},
				RefColumns: []*schema.Column{TUserColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TMessageColumns holds the columns for the "t_message" table.
	TMessageColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Comment: "19 位雪花 ID"},
		{Name: "created_at", Type: field.TypeTime, Comment: "创建时刻，带时区"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "更新时刻，带时区"},
		{Name: "deleted_at", Type: field.TypeTime, Comment: "软删除时刻，带时区"},
		{Name: "send_at", Type: field.TypeTime, Comment: "发送时间"},
		{Name: "session_type", Type: field.TypeEnum, Comment: "会话类型", Enums: []string{"unknown", "single", "group"}, Default: "unknown"},
		{Name: "content_type", Type: field.TypeEnum, Comment: "消息类型", Enums: []string{"unknown", "text", "image", "file"}, Default: "unknown"},
		{Name: "ack", Type: field.TypeString, Comment: "确认序列号", Default: ""},
		{Name: "status", Type: field.TypeInt8, Comment: "消息状态", Default: -1},
		{Name: "text_elem", Type: field.TypeString, Size: 2147483647, Comment: "文本信息", Default: ""},
		{Name: "url", Type: field.TypeString, Comment: "资源地址", Default: ""},
		{Name: "send_id", Type: field.TypeInt64, Comment: "发送者 ID"},
		{Name: "receive_id", Type: field.TypeInt64, Comment: "发送者 ID"},
	}
	// TMessageTable holds the schema information for the "t_message" table.
	TMessageTable = &schema.Table{
		Name:       "t_message",
		Columns:    TMessageColumns,
		PrimaryKey: []*schema.Column{TMessageColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "t_message_t_user_send_msg",
				Columns:    []*schema.Column{TMessageColumns[11]},
				RefColumns: []*schema.Column{TUserColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "t_message_t_user_receive_msg",
				Columns:    []*schema.Column{TMessageColumns[12]},
				RefColumns: []*schema.Column{TUserColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TUserColumns holds the columns for the "t_user" table.
	TUserColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Comment: "19 位雪花 ID"},
		{Name: "created_at", Type: field.TypeTime, Comment: "创建时刻，带时区"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "更新时刻，带时区"},
		{Name: "deleted_at", Type: field.TypeTime, Comment: "软删除时刻，带时区"},
		{Name: "nickname", Type: field.TypeString, Comment: "用户昵称", Default: "请设置昵称"},
		{Name: "email", Type: field.TypeString, Comment: "邮箱", Default: ""},
		{Name: "password", Type: field.TypeString, Comment: "密码", Default: ""},
		{Name: "status", Type: field.TypeEnum, Comment: "用户状态", Enums: []string{"online", "offline"}, Default: "offline"},
		{Name: "last_online_at", Type: field.TypeTime, Comment: "最后在线时间"},
		{Name: "avatar", Type: field.TypeString, Comment: "头像", Default: ""},
		{Name: "sex", Type: field.TypeInt8, Comment: "性别", Default: 0},
	}
	// TUserTable holds the schema information for the "t_user" table.
	TUserTable = &schema.Table{
		Name:       "t_user",
		Columns:    TUserColumns,
		PrimaryKey: []*schema.Column{TUserColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		TFriendTable,
		TFriendApplyTable,
		TFriendGroupTable,
		TGroupTable,
		TGroupMemberTable,
		TMessageTable,
		TUserTable,
	}
)

func init() {
	TFriendTable.ForeignKeys[0].RefTable = TFriendGroupTable
	TFriendTable.ForeignKeys[1].RefTable = TUserTable
	TFriendTable.ForeignKeys[2].RefTable = TUserTable
	TFriendTable.Annotation = &entsql.Annotation{
		Table: "t_friend",
	}
	TFriendApplyTable.ForeignKeys[0].RefTable = TUserTable
	TFriendApplyTable.ForeignKeys[1].RefTable = TUserTable
	TFriendApplyTable.Annotation = &entsql.Annotation{
		Table: "t_friend_apply",
	}
	TFriendGroupTable.ForeignKeys[0].RefTable = TUserTable
	TFriendGroupTable.Annotation = &entsql.Annotation{
		Table: "t_friend_group",
	}
	TGroupTable.ForeignKeys[0].RefTable = TUserTable
	TGroupTable.Annotation = &entsql.Annotation{
		Table: "t_group",
	}
	TGroupMemberTable.ForeignKeys[0].RefTable = TGroupTable
	TGroupMemberTable.ForeignKeys[1].RefTable = TUserTable
	TGroupMemberTable.Annotation = &entsql.Annotation{
		Table: "t_group_member",
	}
	TMessageTable.ForeignKeys[0].RefTable = TUserTable
	TMessageTable.ForeignKeys[1].RefTable = TUserTable
	TMessageTable.Annotation = &entsql.Annotation{
		Table: "t_message",
	}
	TUserTable.Annotation = &entsql.Annotation{
		Table: "t_user",
	}
}
