// Code generated by ent, DO NOT EDIT.

package user

import (
	"IM/internel/types/enums"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldLastOnlineAt holds the string denoting the last_online_at field in the database.
	FieldLastOnlineAt = "last_online_at"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldSex holds the string denoting the sex field in the database.
	FieldSex = "sex"
	// EdgeSendMsg holds the string denoting the send_msg edge name in mutations.
	EdgeSendMsg = "send_msg"
	// EdgeReceiveMsg holds the string denoting the receive_msg edge name in mutations.
	EdgeReceiveMsg = "receive_msg"
	// EdgeOwnerUserFriend holds the string denoting the owner_user_friend edge name in mutations.
	EdgeOwnerUserFriend = "owner_user_friend"
	// EdgeFriendUserFriend holds the string denoting the friend_user_friend edge name in mutations.
	EdgeFriendUserFriend = "friend_user_friend"
	// EdgeUserGroup holds the string denoting the user_group edge name in mutations.
	EdgeUserGroup = "user_group"
	// EdgeUserGroupMember holds the string denoting the user_group_member edge name in mutations.
	EdgeUserGroupMember = "user_group_member"
	// EdgeSendApplyUser holds the string denoting the send_apply_user edge name in mutations.
	EdgeSendApplyUser = "send_apply_user"
	// EdgeApplyUser holds the string denoting the apply_user edge name in mutations.
	EdgeApplyUser = "apply_user"
	// EdgeFriendGroup holds the string denoting the friend_group edge name in mutations.
	EdgeFriendGroup = "friend_group"
	// Table holds the table name of the user in the database.
	Table = "t_user"
	// SendMsgTable is the table that holds the send_msg relation/edge.
	SendMsgTable = "t_message"
	// SendMsgInverseTable is the table name for the Msg entity.
	// It exists in this package in order to avoid circular dependency with the "msg" package.
	SendMsgInverseTable = "t_message"
	// SendMsgColumn is the table column denoting the send_msg relation/edge.
	SendMsgColumn = "send_id"
	// ReceiveMsgTable is the table that holds the receive_msg relation/edge.
	ReceiveMsgTable = "t_message"
	// ReceiveMsgInverseTable is the table name for the Msg entity.
	// It exists in this package in order to avoid circular dependency with the "msg" package.
	ReceiveMsgInverseTable = "t_message"
	// ReceiveMsgColumn is the table column denoting the receive_msg relation/edge.
	ReceiveMsgColumn = "receive_id"
	// OwnerUserFriendTable is the table that holds the owner_user_friend relation/edge.
	OwnerUserFriendTable = "t_friend"
	// OwnerUserFriendInverseTable is the table name for the Friend entity.
	// It exists in this package in order to avoid circular dependency with the "friend" package.
	OwnerUserFriendInverseTable = "t_friend"
	// OwnerUserFriendColumn is the table column denoting the owner_user_friend relation/edge.
	OwnerUserFriendColumn = "owner_user_id"
	// FriendUserFriendTable is the table that holds the friend_user_friend relation/edge.
	FriendUserFriendTable = "t_friend"
	// FriendUserFriendInverseTable is the table name for the Friend entity.
	// It exists in this package in order to avoid circular dependency with the "friend" package.
	FriendUserFriendInverseTable = "t_friend"
	// FriendUserFriendColumn is the table column denoting the friend_user_friend relation/edge.
	FriendUserFriendColumn = "friend_user_id"
	// UserGroupTable is the table that holds the user_group relation/edge.
	UserGroupTable = "t_group"
	// UserGroupInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	UserGroupInverseTable = "t_group"
	// UserGroupColumn is the table column denoting the user_group relation/edge.
	UserGroupColumn = "owner_user_id"
	// UserGroupMemberTable is the table that holds the user_group_member relation/edge.
	UserGroupMemberTable = "t_group_member"
	// UserGroupMemberInverseTable is the table name for the GroupMember entity.
	// It exists in this package in order to avoid circular dependency with the "groupmember" package.
	UserGroupMemberInverseTable = "t_group_member"
	// UserGroupMemberColumn is the table column denoting the user_group_member relation/edge.
	UserGroupMemberColumn = "user_id"
	// SendApplyUserTable is the table that holds the send_apply_user relation/edge.
	SendApplyUserTable = "t_friend_apply"
	// SendApplyUserInverseTable is the table name for the FriendApply entity.
	// It exists in this package in order to avoid circular dependency with the "friendapply" package.
	SendApplyUserInverseTable = "t_friend_apply"
	// SendApplyUserColumn is the table column denoting the send_apply_user relation/edge.
	SendApplyUserColumn = "from_user_id"
	// ApplyUserTable is the table that holds the apply_user relation/edge.
	ApplyUserTable = "t_friend_apply"
	// ApplyUserInverseTable is the table name for the FriendApply entity.
	// It exists in this package in order to avoid circular dependency with the "friendapply" package.
	ApplyUserInverseTable = "t_friend_apply"
	// ApplyUserColumn is the table column denoting the apply_user relation/edge.
	ApplyUserColumn = "to_user_id"
	// FriendGroupTable is the table that holds the friend_group relation/edge.
	FriendGroupTable = "t_friend_group"
	// FriendGroupInverseTable is the table name for the FriendGroup entity.
	// It exists in this package in order to avoid circular dependency with the "friendgroup" package.
	FriendGroupInverseTable = "t_friend_group"
	// FriendGroupColumn is the table column denoting the friend_group relation/edge.
	FriendGroupColumn = "owner_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldNickname,
	FieldEmail,
	FieldPassword,
	FieldStatus,
	FieldLastOnlineAt,
	FieldAvatar,
	FieldSex,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultNickname holds the default value on creation for the "nickname" field.
	DefaultNickname string
	// DefaultEmail holds the default value on creation for the "email" field.
	DefaultEmail string
	// DefaultPassword holds the default value on creation for the "password" field.
	DefaultPassword string
	// DefaultLastOnlineAt holds the default value on creation for the "last_online_at" field.
	DefaultLastOnlineAt time.Time
	// DefaultAvatar holds the default value on creation for the "avatar" field.
	DefaultAvatar string
	// DefaultSex holds the default value on creation for the "sex" field.
	DefaultSex int8
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

const DefaultStatus enums.UserStatus = "offline"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enums.UserStatus) error {
	switch s {
	case "online", "offline":
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByNickname orders the results by the nickname field.
func ByNickname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNickname, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByLastOnlineAt orders the results by the last_online_at field.
func ByLastOnlineAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastOnlineAt, opts...).ToFunc()
}

// ByAvatar orders the results by the avatar field.
func ByAvatar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatar, opts...).ToFunc()
}

// BySex orders the results by the sex field.
func BySex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSex, opts...).ToFunc()
}

// BySendMsgCount orders the results by send_msg count.
func BySendMsgCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSendMsgStep(), opts...)
	}
}

// BySendMsg orders the results by send_msg terms.
func BySendMsg(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSendMsgStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReceiveMsgCount orders the results by receive_msg count.
func ByReceiveMsgCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReceiveMsgStep(), opts...)
	}
}

// ByReceiveMsg orders the results by receive_msg terms.
func ByReceiveMsg(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReceiveMsgStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwnerUserFriendCount orders the results by owner_user_friend count.
func ByOwnerUserFriendCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnerUserFriendStep(), opts...)
	}
}

// ByOwnerUserFriend orders the results by owner_user_friend terms.
func ByOwnerUserFriend(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerUserFriendStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFriendUserFriendCount orders the results by friend_user_friend count.
func ByFriendUserFriendCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFriendUserFriendStep(), opts...)
	}
}

// ByFriendUserFriend orders the results by friend_user_friend terms.
func ByFriendUserFriend(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFriendUserFriendStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserGroupCount orders the results by user_group count.
func ByUserGroupCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserGroupStep(), opts...)
	}
}

// ByUserGroup orders the results by user_group terms.
func ByUserGroup(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserGroupStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserGroupMemberCount orders the results by user_group_member count.
func ByUserGroupMemberCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserGroupMemberStep(), opts...)
	}
}

// ByUserGroupMember orders the results by user_group_member terms.
func ByUserGroupMember(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserGroupMemberStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySendApplyUserCount orders the results by send_apply_user count.
func BySendApplyUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSendApplyUserStep(), opts...)
	}
}

// BySendApplyUser orders the results by send_apply_user terms.
func BySendApplyUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSendApplyUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByApplyUserCount orders the results by apply_user count.
func ByApplyUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApplyUserStep(), opts...)
	}
}

// ByApplyUser orders the results by apply_user terms.
func ByApplyUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplyUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFriendGroupCount orders the results by friend_group count.
func ByFriendGroupCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFriendGroupStep(), opts...)
	}
}

// ByFriendGroup orders the results by friend_group terms.
func ByFriendGroup(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFriendGroupStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSendMsgStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SendMsgInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SendMsgTable, SendMsgColumn),
	)
}
func newReceiveMsgStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReceiveMsgInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReceiveMsgTable, ReceiveMsgColumn),
	)
}
func newOwnerUserFriendStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerUserFriendInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OwnerUserFriendTable, OwnerUserFriendColumn),
	)
}
func newFriendUserFriendStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FriendUserFriendInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FriendUserFriendTable, FriendUserFriendColumn),
	)
}
func newUserGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserGroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserGroupTable, UserGroupColumn),
	)
}
func newUserGroupMemberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserGroupMemberInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserGroupMemberTable, UserGroupMemberColumn),
	)
}
func newSendApplyUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SendApplyUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SendApplyUserTable, SendApplyUserColumn),
	)
}
func newApplyUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplyUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ApplyUserTable, ApplyUserColumn),
	)
}
func newFriendGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FriendGroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FriendGroupTable, FriendGroupColumn),
	)
}
