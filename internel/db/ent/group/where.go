// Code generated by ent, DO NOT EDIT.

package group

import (
	"IM/internel/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Group {
	return predicate.Group(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Group {
	return predicate.Group(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Group {
	return predicate.Group(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Group {
	return predicate.Group(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldDeletedAt, v))
}

// GroupName applies equality check predicate on the "group_name" field. It's identical to GroupNameEQ.
func GroupName(v string) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldGroupName, v))
}

// Notification applies equality check predicate on the "notification" field. It's identical to NotificationEQ.
func Notification(v string) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldNotification, v))
}

// Relationship applies equality check predicate on the "relationship" field. It's identical to RelationshipEQ.
func Relationship(v int8) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldRelationship, v))
}

// OwnerUserID applies equality check predicate on the "owner_user_id" field. It's identical to OwnerUserIDEQ.
func OwnerUserID(v int64) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldOwnerUserID, v))
}

// FaceURL applies equality check predicate on the "face_url" field. It's identical to FaceURLEQ.
func FaceURL(v string) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldFaceURL, v))
}

// Count applies equality check predicate on the "count" field. It's identical to CountEQ.
func Count(v int64) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldLTE(FieldDeletedAt, v))
}

// GroupNameEQ applies the EQ predicate on the "group_name" field.
func GroupNameEQ(v string) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldGroupName, v))
}

// GroupNameNEQ applies the NEQ predicate on the "group_name" field.
func GroupNameNEQ(v string) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldGroupName, v))
}

// GroupNameIn applies the In predicate on the "group_name" field.
func GroupNameIn(vs ...string) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldGroupName, vs...))
}

// GroupNameNotIn applies the NotIn predicate on the "group_name" field.
func GroupNameNotIn(vs ...string) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldGroupName, vs...))
}

// GroupNameGT applies the GT predicate on the "group_name" field.
func GroupNameGT(v string) predicate.Group {
	return predicate.Group(sql.FieldGT(FieldGroupName, v))
}

// GroupNameGTE applies the GTE predicate on the "group_name" field.
func GroupNameGTE(v string) predicate.Group {
	return predicate.Group(sql.FieldGTE(FieldGroupName, v))
}

// GroupNameLT applies the LT predicate on the "group_name" field.
func GroupNameLT(v string) predicate.Group {
	return predicate.Group(sql.FieldLT(FieldGroupName, v))
}

// GroupNameLTE applies the LTE predicate on the "group_name" field.
func GroupNameLTE(v string) predicate.Group {
	return predicate.Group(sql.FieldLTE(FieldGroupName, v))
}

// GroupNameContains applies the Contains predicate on the "group_name" field.
func GroupNameContains(v string) predicate.Group {
	return predicate.Group(sql.FieldContains(FieldGroupName, v))
}

// GroupNameHasPrefix applies the HasPrefix predicate on the "group_name" field.
func GroupNameHasPrefix(v string) predicate.Group {
	return predicate.Group(sql.FieldHasPrefix(FieldGroupName, v))
}

// GroupNameHasSuffix applies the HasSuffix predicate on the "group_name" field.
func GroupNameHasSuffix(v string) predicate.Group {
	return predicate.Group(sql.FieldHasSuffix(FieldGroupName, v))
}

// GroupNameEqualFold applies the EqualFold predicate on the "group_name" field.
func GroupNameEqualFold(v string) predicate.Group {
	return predicate.Group(sql.FieldEqualFold(FieldGroupName, v))
}

// GroupNameContainsFold applies the ContainsFold predicate on the "group_name" field.
func GroupNameContainsFold(v string) predicate.Group {
	return predicate.Group(sql.FieldContainsFold(FieldGroupName, v))
}

// NotificationEQ applies the EQ predicate on the "notification" field.
func NotificationEQ(v string) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldNotification, v))
}

// NotificationNEQ applies the NEQ predicate on the "notification" field.
func NotificationNEQ(v string) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldNotification, v))
}

// NotificationIn applies the In predicate on the "notification" field.
func NotificationIn(vs ...string) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldNotification, vs...))
}

// NotificationNotIn applies the NotIn predicate on the "notification" field.
func NotificationNotIn(vs ...string) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldNotification, vs...))
}

// NotificationGT applies the GT predicate on the "notification" field.
func NotificationGT(v string) predicate.Group {
	return predicate.Group(sql.FieldGT(FieldNotification, v))
}

// NotificationGTE applies the GTE predicate on the "notification" field.
func NotificationGTE(v string) predicate.Group {
	return predicate.Group(sql.FieldGTE(FieldNotification, v))
}

// NotificationLT applies the LT predicate on the "notification" field.
func NotificationLT(v string) predicate.Group {
	return predicate.Group(sql.FieldLT(FieldNotification, v))
}

// NotificationLTE applies the LTE predicate on the "notification" field.
func NotificationLTE(v string) predicate.Group {
	return predicate.Group(sql.FieldLTE(FieldNotification, v))
}

// NotificationContains applies the Contains predicate on the "notification" field.
func NotificationContains(v string) predicate.Group {
	return predicate.Group(sql.FieldContains(FieldNotification, v))
}

// NotificationHasPrefix applies the HasPrefix predicate on the "notification" field.
func NotificationHasPrefix(v string) predicate.Group {
	return predicate.Group(sql.FieldHasPrefix(FieldNotification, v))
}

// NotificationHasSuffix applies the HasSuffix predicate on the "notification" field.
func NotificationHasSuffix(v string) predicate.Group {
	return predicate.Group(sql.FieldHasSuffix(FieldNotification, v))
}

// NotificationEqualFold applies the EqualFold predicate on the "notification" field.
func NotificationEqualFold(v string) predicate.Group {
	return predicate.Group(sql.FieldEqualFold(FieldNotification, v))
}

// NotificationContainsFold applies the ContainsFold predicate on the "notification" field.
func NotificationContainsFold(v string) predicate.Group {
	return predicate.Group(sql.FieldContainsFold(FieldNotification, v))
}

// RelationshipEQ applies the EQ predicate on the "relationship" field.
func RelationshipEQ(v int8) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldRelationship, v))
}

// RelationshipNEQ applies the NEQ predicate on the "relationship" field.
func RelationshipNEQ(v int8) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldRelationship, v))
}

// RelationshipIn applies the In predicate on the "relationship" field.
func RelationshipIn(vs ...int8) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldRelationship, vs...))
}

// RelationshipNotIn applies the NotIn predicate on the "relationship" field.
func RelationshipNotIn(vs ...int8) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldRelationship, vs...))
}

// RelationshipGT applies the GT predicate on the "relationship" field.
func RelationshipGT(v int8) predicate.Group {
	return predicate.Group(sql.FieldGT(FieldRelationship, v))
}

// RelationshipGTE applies the GTE predicate on the "relationship" field.
func RelationshipGTE(v int8) predicate.Group {
	return predicate.Group(sql.FieldGTE(FieldRelationship, v))
}

// RelationshipLT applies the LT predicate on the "relationship" field.
func RelationshipLT(v int8) predicate.Group {
	return predicate.Group(sql.FieldLT(FieldRelationship, v))
}

// RelationshipLTE applies the LTE predicate on the "relationship" field.
func RelationshipLTE(v int8) predicate.Group {
	return predicate.Group(sql.FieldLTE(FieldRelationship, v))
}

// OwnerUserIDEQ applies the EQ predicate on the "owner_user_id" field.
func OwnerUserIDEQ(v int64) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldOwnerUserID, v))
}

// OwnerUserIDNEQ applies the NEQ predicate on the "owner_user_id" field.
func OwnerUserIDNEQ(v int64) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldOwnerUserID, v))
}

// OwnerUserIDIn applies the In predicate on the "owner_user_id" field.
func OwnerUserIDIn(vs ...int64) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldOwnerUserID, vs...))
}

// OwnerUserIDNotIn applies the NotIn predicate on the "owner_user_id" field.
func OwnerUserIDNotIn(vs ...int64) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldOwnerUserID, vs...))
}

// FaceURLEQ applies the EQ predicate on the "face_url" field.
func FaceURLEQ(v string) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldFaceURL, v))
}

// FaceURLNEQ applies the NEQ predicate on the "face_url" field.
func FaceURLNEQ(v string) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldFaceURL, v))
}

// FaceURLIn applies the In predicate on the "face_url" field.
func FaceURLIn(vs ...string) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldFaceURL, vs...))
}

// FaceURLNotIn applies the NotIn predicate on the "face_url" field.
func FaceURLNotIn(vs ...string) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldFaceURL, vs...))
}

// FaceURLGT applies the GT predicate on the "face_url" field.
func FaceURLGT(v string) predicate.Group {
	return predicate.Group(sql.FieldGT(FieldFaceURL, v))
}

// FaceURLGTE applies the GTE predicate on the "face_url" field.
func FaceURLGTE(v string) predicate.Group {
	return predicate.Group(sql.FieldGTE(FieldFaceURL, v))
}

// FaceURLLT applies the LT predicate on the "face_url" field.
func FaceURLLT(v string) predicate.Group {
	return predicate.Group(sql.FieldLT(FieldFaceURL, v))
}

// FaceURLLTE applies the LTE predicate on the "face_url" field.
func FaceURLLTE(v string) predicate.Group {
	return predicate.Group(sql.FieldLTE(FieldFaceURL, v))
}

// FaceURLContains applies the Contains predicate on the "face_url" field.
func FaceURLContains(v string) predicate.Group {
	return predicate.Group(sql.FieldContains(FieldFaceURL, v))
}

// FaceURLHasPrefix applies the HasPrefix predicate on the "face_url" field.
func FaceURLHasPrefix(v string) predicate.Group {
	return predicate.Group(sql.FieldHasPrefix(FieldFaceURL, v))
}

// FaceURLHasSuffix applies the HasSuffix predicate on the "face_url" field.
func FaceURLHasSuffix(v string) predicate.Group {
	return predicate.Group(sql.FieldHasSuffix(FieldFaceURL, v))
}

// FaceURLEqualFold applies the EqualFold predicate on the "face_url" field.
func FaceURLEqualFold(v string) predicate.Group {
	return predicate.Group(sql.FieldEqualFold(FieldFaceURL, v))
}

// FaceURLContainsFold applies the ContainsFold predicate on the "face_url" field.
func FaceURLContainsFold(v string) predicate.Group {
	return predicate.Group(sql.FieldContainsFold(FieldFaceURL, v))
}

// CountEQ applies the EQ predicate on the "count" field.
func CountEQ(v int64) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldCount, v))
}

// CountNEQ applies the NEQ predicate on the "count" field.
func CountNEQ(v int64) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldCount, v))
}

// CountIn applies the In predicate on the "count" field.
func CountIn(vs ...int64) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldCount, vs...))
}

// CountNotIn applies the NotIn predicate on the "count" field.
func CountNotIn(vs ...int64) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldCount, vs...))
}

// CountGT applies the GT predicate on the "count" field.
func CountGT(v int64) predicate.Group {
	return predicate.Group(sql.FieldGT(FieldCount, v))
}

// CountGTE applies the GTE predicate on the "count" field.
func CountGTE(v int64) predicate.Group {
	return predicate.Group(sql.FieldGTE(FieldCount, v))
}

// CountLT applies the LT predicate on the "count" field.
func CountLT(v int64) predicate.Group {
	return predicate.Group(sql.FieldLT(FieldCount, v))
}

// CountLTE applies the LTE predicate on the "count" field.
func CountLTE(v int64) predicate.Group {
	return predicate.Group(sql.FieldLTE(FieldCount, v))
}

// HasOwnerUser applies the HasEdge predicate on the "owner_user" edge.
func HasOwnerUser() predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerUserTable, OwnerUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerUserWith applies the HasEdge predicate on the "owner_user" edge with a given conditions (other predicates).
func HasOwnerUserWith(preds ...predicate.User) predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := newOwnerUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroupMember applies the HasEdge predicate on the "group_member" edge.
func HasGroupMember() predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GroupMemberTable, GroupMemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupMemberWith applies the HasEdge predicate on the "group_member" edge with a given conditions (other predicates).
func HasGroupMemberWith(preds ...predicate.GroupMember) predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := newGroupMemberStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Group) predicate.Group {
	return predicate.Group(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Group) predicate.Group {
	return predicate.Group(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Group) predicate.Group {
	return predicate.Group(sql.NotPredicates(p))
}
