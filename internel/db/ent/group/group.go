// Code generated by ent, DO NOT EDIT.

package group

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the group type in the database.
	Label = "group"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldGroupName holds the string denoting the group_name field in the database.
	FieldGroupName = "group_name"
	// FieldNotification holds the string denoting the notification field in the database.
	FieldNotification = "notification"
	// FieldRelationship holds the string denoting the relationship field in the database.
	FieldRelationship = "relationship"
	// FieldOwnerUserID holds the string denoting the owner_user_id field in the database.
	FieldOwnerUserID = "owner_user_id"
	// FieldFaceURL holds the string denoting the face_url field in the database.
	FieldFaceURL = "face_url"
	// FieldCount holds the string denoting the count field in the database.
	FieldCount = "count"
	// EdgeOwnerUser holds the string denoting the owner_user edge name in mutations.
	EdgeOwnerUser = "owner_user"
	// EdgeGroupMember holds the string denoting the group_member edge name in mutations.
	EdgeGroupMember = "group_member"
	// Table holds the table name of the group in the database.
	Table = "t_group"
	// OwnerUserTable is the table that holds the owner_user relation/edge.
	OwnerUserTable = "t_group"
	// OwnerUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerUserInverseTable = "t_user"
	// OwnerUserColumn is the table column denoting the owner_user relation/edge.
	OwnerUserColumn = "owner_user_id"
	// GroupMemberTable is the table that holds the group_member relation/edge.
	GroupMemberTable = "t_group_member"
	// GroupMemberInverseTable is the table name for the GroupMember entity.
	// It exists in this package in order to avoid circular dependency with the "groupmember" package.
	GroupMemberInverseTable = "t_group_member"
	// GroupMemberColumn is the table column denoting the group_member relation/edge.
	GroupMemberColumn = "group_id"
)

// Columns holds all SQL columns for group fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldGroupName,
	FieldNotification,
	FieldRelationship,
	FieldOwnerUserID,
	FieldFaceURL,
	FieldCount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

// OrderOption defines the ordering options for the Group queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByGroupName orders the results by the group_name field.
func ByGroupName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupName, opts...).ToFunc()
}

// ByNotification orders the results by the notification field.
func ByNotification(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotification, opts...).ToFunc()
}

// ByRelationship orders the results by the relationship field.
func ByRelationship(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelationship, opts...).ToFunc()
}

// ByOwnerUserID orders the results by the owner_user_id field.
func ByOwnerUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerUserID, opts...).ToFunc()
}

// ByFaceURL orders the results by the face_url field.
func ByFaceURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFaceURL, opts...).ToFunc()
}

// ByCount orders the results by the count field.
func ByCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCount, opts...).ToFunc()
}

// ByOwnerUserField orders the results by owner_user field.
func ByOwnerUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByGroupMemberCount orders the results by group_member count.
func ByGroupMemberCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupMemberStep(), opts...)
	}
}

// ByGroupMember orders the results by group_member terms.
func ByGroupMember(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupMemberStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerUserTable, OwnerUserColumn),
	)
}
func newGroupMemberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupMemberInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GroupMemberTable, GroupMemberColumn),
	)
}
