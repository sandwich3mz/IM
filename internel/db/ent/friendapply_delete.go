// Code generated by ent, DO NOT EDIT.

package ent

import (
	"IM/internel/db/ent/friendapply"
	"IM/internel/db/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FriendApplyDelete is the builder for deleting a FriendApply entity.
type FriendApplyDelete struct {
	config
	hooks    []Hook
	mutation *FriendApplyMutation
}

// Where appends a list predicates to the FriendApplyDelete builder.
func (fad *FriendApplyDelete) Where(ps ...predicate.FriendApply) *FriendApplyDelete {
	fad.mutation.Where(ps...)
	return fad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fad *FriendApplyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fad.sqlExec, fad.mutation, fad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fad *FriendApplyDelete) ExecX(ctx context.Context) int {
	n, err := fad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fad *FriendApplyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(friendapply.Table, sqlgraph.NewFieldSpec(friendapply.FieldID, field.TypeInt64))
	if ps := fad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fad.mutation.done = true
	return affected, err
}

// FriendApplyDeleteOne is the builder for deleting a single FriendApply entity.
type FriendApplyDeleteOne struct {
	fad *FriendApplyDelete
}

// Where appends a list predicates to the FriendApplyDelete builder.
func (fado *FriendApplyDeleteOne) Where(ps ...predicate.FriendApply) *FriendApplyDeleteOne {
	fado.fad.mutation.Where(ps...)
	return fado
}

// Exec executes the deletion query.
func (fado *FriendApplyDeleteOne) Exec(ctx context.Context) error {
	n, err := fado.fad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{friendapply.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fado *FriendApplyDeleteOne) ExecX(ctx context.Context) {
	if err := fado.Exec(ctx); err != nil {
		panic(err)
	}
}
