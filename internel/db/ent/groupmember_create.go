// Code generated by ent, DO NOT EDIT.

package ent

import (
	"IM/internel/db/ent/group"
	"IM/internel/db/ent/groupmember"
	"IM/internel/db/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupMemberCreate is the builder for creating a GroupMember entity.
type GroupMemberCreate struct {
	config
	mutation *GroupMemberMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (gmc *GroupMemberCreate) SetCreatedAt(t time.Time) *GroupMemberCreate {
	gmc.mutation.SetCreatedAt(t)
	return gmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gmc *GroupMemberCreate) SetNillableCreatedAt(t *time.Time) *GroupMemberCreate {
	if t != nil {
		gmc.SetCreatedAt(*t)
	}
	return gmc
}

// SetUpdatedAt sets the "updated_at" field.
func (gmc *GroupMemberCreate) SetUpdatedAt(t time.Time) *GroupMemberCreate {
	gmc.mutation.SetUpdatedAt(t)
	return gmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gmc *GroupMemberCreate) SetNillableUpdatedAt(t *time.Time) *GroupMemberCreate {
	if t != nil {
		gmc.SetUpdatedAt(*t)
	}
	return gmc
}

// SetDeletedAt sets the "deleted_at" field.
func (gmc *GroupMemberCreate) SetDeletedAt(t time.Time) *GroupMemberCreate {
	gmc.mutation.SetDeletedAt(t)
	return gmc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gmc *GroupMemberCreate) SetNillableDeletedAt(t *time.Time) *GroupMemberCreate {
	if t != nil {
		gmc.SetDeletedAt(*t)
	}
	return gmc
}

// SetGroupID sets the "group_id" field.
func (gmc *GroupMemberCreate) SetGroupID(i int64) *GroupMemberCreate {
	gmc.mutation.SetGroupID(i)
	return gmc
}

// SetUserID sets the "user_id" field.
func (gmc *GroupMemberCreate) SetUserID(i int64) *GroupMemberCreate {
	gmc.mutation.SetUserID(i)
	return gmc
}

// SetNickname sets the "nickname" field.
func (gmc *GroupMemberCreate) SetNickname(i int8) *GroupMemberCreate {
	gmc.mutation.SetNickname(i)
	return gmc
}

// SetFaceURL sets the "face_url" field.
func (gmc *GroupMemberCreate) SetFaceURL(s string) *GroupMemberCreate {
	gmc.mutation.SetFaceURL(s)
	return gmc
}

// SetCount sets the "count" field.
func (gmc *GroupMemberCreate) SetCount(i int64) *GroupMemberCreate {
	gmc.mutation.SetCount(i)
	return gmc
}

// SetRemark sets the "remark" field.
func (gmc *GroupMemberCreate) SetRemark(s string) *GroupMemberCreate {
	gmc.mutation.SetRemark(s)
	return gmc
}

// SetID sets the "id" field.
func (gmc *GroupMemberCreate) SetID(i int64) *GroupMemberCreate {
	gmc.mutation.SetID(i)
	return gmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gmc *GroupMemberCreate) SetNillableID(i *int64) *GroupMemberCreate {
	if i != nil {
		gmc.SetID(*i)
	}
	return gmc
}

// SetGroupUserID sets the "group_user" edge to the User entity by ID.
func (gmc *GroupMemberCreate) SetGroupUserID(id int64) *GroupMemberCreate {
	gmc.mutation.SetGroupUserID(id)
	return gmc
}

// SetGroupUser sets the "group_user" edge to the User entity.
func (gmc *GroupMemberCreate) SetGroupUser(u *User) *GroupMemberCreate {
	return gmc.SetGroupUserID(u.ID)
}

// SetMemberGroupID sets the "member_group" edge to the Group entity by ID.
func (gmc *GroupMemberCreate) SetMemberGroupID(id int64) *GroupMemberCreate {
	gmc.mutation.SetMemberGroupID(id)
	return gmc
}

// SetMemberGroup sets the "member_group" edge to the Group entity.
func (gmc *GroupMemberCreate) SetMemberGroup(g *Group) *GroupMemberCreate {
	return gmc.SetMemberGroupID(g.ID)
}

// Mutation returns the GroupMemberMutation object of the builder.
func (gmc *GroupMemberCreate) Mutation() *GroupMemberMutation {
	return gmc.mutation
}

// Save creates the GroupMember in the database.
func (gmc *GroupMemberCreate) Save(ctx context.Context) (*GroupMember, error) {
	gmc.defaults()
	return withHooks(ctx, gmc.sqlSave, gmc.mutation, gmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gmc *GroupMemberCreate) SaveX(ctx context.Context) *GroupMember {
	v, err := gmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gmc *GroupMemberCreate) Exec(ctx context.Context) error {
	_, err := gmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmc *GroupMemberCreate) ExecX(ctx context.Context) {
	if err := gmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gmc *GroupMemberCreate) defaults() {
	if _, ok := gmc.mutation.CreatedAt(); !ok {
		v := groupmember.DefaultCreatedAt()
		gmc.mutation.SetCreatedAt(v)
	}
	if _, ok := gmc.mutation.UpdatedAt(); !ok {
		v := groupmember.DefaultUpdatedAt()
		gmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gmc.mutation.DeletedAt(); !ok {
		v := groupmember.DefaultDeletedAt
		gmc.mutation.SetDeletedAt(v)
	}
	if _, ok := gmc.mutation.ID(); !ok {
		v := groupmember.DefaultID()
		gmc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gmc *GroupMemberCreate) check() error {
	if _, ok := gmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GroupMember.created_at"`)}
	}
	if _, ok := gmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GroupMember.updated_at"`)}
	}
	if _, ok := gmc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "GroupMember.deleted_at"`)}
	}
	if _, ok := gmc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group_id", err: errors.New(`ent: missing required field "GroupMember.group_id"`)}
	}
	if _, ok := gmc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "GroupMember.user_id"`)}
	}
	if _, ok := gmc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "GroupMember.nickname"`)}
	}
	if _, ok := gmc.mutation.FaceURL(); !ok {
		return &ValidationError{Name: "face_url", err: errors.New(`ent: missing required field "GroupMember.face_url"`)}
	}
	if _, ok := gmc.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New(`ent: missing required field "GroupMember.count"`)}
	}
	if _, ok := gmc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "GroupMember.remark"`)}
	}
	if _, ok := gmc.mutation.GroupUserID(); !ok {
		return &ValidationError{Name: "group_user", err: errors.New(`ent: missing required edge "GroupMember.group_user"`)}
	}
	if _, ok := gmc.mutation.MemberGroupID(); !ok {
		return &ValidationError{Name: "member_group", err: errors.New(`ent: missing required edge "GroupMember.member_group"`)}
	}
	return nil
}

func (gmc *GroupMemberCreate) sqlSave(ctx context.Context) (*GroupMember, error) {
	if err := gmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	gmc.mutation.id = &_node.ID
	gmc.mutation.done = true
	return _node, nil
}

func (gmc *GroupMemberCreate) createSpec() (*GroupMember, *sqlgraph.CreateSpec) {
	var (
		_node = &GroupMember{config: gmc.config}
		_spec = sqlgraph.NewCreateSpec(groupmember.Table, sqlgraph.NewFieldSpec(groupmember.FieldID, field.TypeInt64))
	)
	if id, ok := gmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gmc.mutation.CreatedAt(); ok {
		_spec.SetField(groupmember.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gmc.mutation.UpdatedAt(); ok {
		_spec.SetField(groupmember.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := gmc.mutation.DeletedAt(); ok {
		_spec.SetField(groupmember.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := gmc.mutation.Nickname(); ok {
		_spec.SetField(groupmember.FieldNickname, field.TypeInt8, value)
		_node.Nickname = value
	}
	if value, ok := gmc.mutation.FaceURL(); ok {
		_spec.SetField(groupmember.FieldFaceURL, field.TypeString, value)
		_node.FaceURL = value
	}
	if value, ok := gmc.mutation.Count(); ok {
		_spec.SetField(groupmember.FieldCount, field.TypeInt64, value)
		_node.Count = value
	}
	if value, ok := gmc.mutation.Remark(); ok {
		_spec.SetField(groupmember.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if nodes := gmc.mutation.GroupUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupmember.GroupUserTable,
			Columns: []string{groupmember.GroupUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gmc.mutation.MemberGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupmember.MemberGroupTable,
			Columns: []string{groupmember.MemberGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GroupID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GroupMemberCreateBulk is the builder for creating many GroupMember entities in bulk.
type GroupMemberCreateBulk struct {
	config
	err      error
	builders []*GroupMemberCreate
}

// Save creates the GroupMember entities in the database.
func (gmcb *GroupMemberCreateBulk) Save(ctx context.Context) ([]*GroupMember, error) {
	if gmcb.err != nil {
		return nil, gmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gmcb.builders))
	nodes := make([]*GroupMember, len(gmcb.builders))
	mutators := make([]Mutator, len(gmcb.builders))
	for i := range gmcb.builders {
		func(i int, root context.Context) {
			builder := gmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupMemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gmcb *GroupMemberCreateBulk) SaveX(ctx context.Context) []*GroupMember {
	v, err := gmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gmcb *GroupMemberCreateBulk) Exec(ctx context.Context) error {
	_, err := gmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmcb *GroupMemberCreateBulk) ExecX(ctx context.Context) {
	if err := gmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
