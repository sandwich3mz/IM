// Code generated by ent, DO NOT EDIT.

package msg

import (
	"IM/internel/db/ent/predicate"
	"IM/internel/types/enums"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Msg {
	return predicate.Msg(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Msg {
	return predicate.Msg(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Msg {
	return predicate.Msg(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Msg {
	return predicate.Msg(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Msg {
	return predicate.Msg(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Msg {
	return predicate.Msg(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Msg {
	return predicate.Msg(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldDeletedAt, v))
}

// SendAt applies equality check predicate on the "send_at" field. It's identical to SendAtEQ.
func SendAt(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldSendAt, v))
}

// SendID applies equality check predicate on the "send_id" field. It's identical to SendIDEQ.
func SendID(v int64) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldSendID, v))
}

// ReceiveID applies equality check predicate on the "receive_id" field. It's identical to ReceiveIDEQ.
func ReceiveID(v int64) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldReceiveID, v))
}

// Seq applies equality check predicate on the "seq" field. It's identical to SeqEQ.
func Seq(v int32) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldSeq, v))
}

// TextElem applies equality check predicate on the "text_elem" field. It's identical to TextElemEQ.
func TextElem(v string) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldTextElem, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldLTE(FieldDeletedAt, v))
}

// SendAtEQ applies the EQ predicate on the "send_at" field.
func SendAtEQ(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldSendAt, v))
}

// SendAtNEQ applies the NEQ predicate on the "send_at" field.
func SendAtNEQ(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldNEQ(FieldSendAt, v))
}

// SendAtIn applies the In predicate on the "send_at" field.
func SendAtIn(vs ...time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldIn(FieldSendAt, vs...))
}

// SendAtNotIn applies the NotIn predicate on the "send_at" field.
func SendAtNotIn(vs ...time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldNotIn(FieldSendAt, vs...))
}

// SendAtGT applies the GT predicate on the "send_at" field.
func SendAtGT(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldGT(FieldSendAt, v))
}

// SendAtGTE applies the GTE predicate on the "send_at" field.
func SendAtGTE(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldGTE(FieldSendAt, v))
}

// SendAtLT applies the LT predicate on the "send_at" field.
func SendAtLT(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldLT(FieldSendAt, v))
}

// SendAtLTE applies the LTE predicate on the "send_at" field.
func SendAtLTE(v time.Time) predicate.Msg {
	return predicate.Msg(sql.FieldLTE(FieldSendAt, v))
}

// SessionTypeEQ applies the EQ predicate on the "session_type" field.
func SessionTypeEQ(v enums.SessionType) predicate.Msg {
	vc := v
	return predicate.Msg(sql.FieldEQ(FieldSessionType, vc))
}

// SessionTypeNEQ applies the NEQ predicate on the "session_type" field.
func SessionTypeNEQ(v enums.SessionType) predicate.Msg {
	vc := v
	return predicate.Msg(sql.FieldNEQ(FieldSessionType, vc))
}

// SessionTypeIn applies the In predicate on the "session_type" field.
func SessionTypeIn(vs ...enums.SessionType) predicate.Msg {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Msg(sql.FieldIn(FieldSessionType, v...))
}

// SessionTypeNotIn applies the NotIn predicate on the "session_type" field.
func SessionTypeNotIn(vs ...enums.SessionType) predicate.Msg {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Msg(sql.FieldNotIn(FieldSessionType, v...))
}

// SendIDEQ applies the EQ predicate on the "send_id" field.
func SendIDEQ(v int64) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldSendID, v))
}

// SendIDNEQ applies the NEQ predicate on the "send_id" field.
func SendIDNEQ(v int64) predicate.Msg {
	return predicate.Msg(sql.FieldNEQ(FieldSendID, v))
}

// SendIDIn applies the In predicate on the "send_id" field.
func SendIDIn(vs ...int64) predicate.Msg {
	return predicate.Msg(sql.FieldIn(FieldSendID, vs...))
}

// SendIDNotIn applies the NotIn predicate on the "send_id" field.
func SendIDNotIn(vs ...int64) predicate.Msg {
	return predicate.Msg(sql.FieldNotIn(FieldSendID, vs...))
}

// ReceiveIDEQ applies the EQ predicate on the "receive_id" field.
func ReceiveIDEQ(v int64) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldReceiveID, v))
}

// ReceiveIDNEQ applies the NEQ predicate on the "receive_id" field.
func ReceiveIDNEQ(v int64) predicate.Msg {
	return predicate.Msg(sql.FieldNEQ(FieldReceiveID, v))
}

// ReceiveIDIn applies the In predicate on the "receive_id" field.
func ReceiveIDIn(vs ...int64) predicate.Msg {
	return predicate.Msg(sql.FieldIn(FieldReceiveID, vs...))
}

// ReceiveIDNotIn applies the NotIn predicate on the "receive_id" field.
func ReceiveIDNotIn(vs ...int64) predicate.Msg {
	return predicate.Msg(sql.FieldNotIn(FieldReceiveID, vs...))
}

// ContentTypeEQ applies the EQ predicate on the "content_type" field.
func ContentTypeEQ(v enums.MessageType) predicate.Msg {
	vc := v
	return predicate.Msg(sql.FieldEQ(FieldContentType, vc))
}

// ContentTypeNEQ applies the NEQ predicate on the "content_type" field.
func ContentTypeNEQ(v enums.MessageType) predicate.Msg {
	vc := v
	return predicate.Msg(sql.FieldNEQ(FieldContentType, vc))
}

// ContentTypeIn applies the In predicate on the "content_type" field.
func ContentTypeIn(vs ...enums.MessageType) predicate.Msg {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Msg(sql.FieldIn(FieldContentType, v...))
}

// ContentTypeNotIn applies the NotIn predicate on the "content_type" field.
func ContentTypeNotIn(vs ...enums.MessageType) predicate.Msg {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Msg(sql.FieldNotIn(FieldContentType, v...))
}

// SeqEQ applies the EQ predicate on the "seq" field.
func SeqEQ(v int32) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldSeq, v))
}

// SeqNEQ applies the NEQ predicate on the "seq" field.
func SeqNEQ(v int32) predicate.Msg {
	return predicate.Msg(sql.FieldNEQ(FieldSeq, v))
}

// SeqIn applies the In predicate on the "seq" field.
func SeqIn(vs ...int32) predicate.Msg {
	return predicate.Msg(sql.FieldIn(FieldSeq, vs...))
}

// SeqNotIn applies the NotIn predicate on the "seq" field.
func SeqNotIn(vs ...int32) predicate.Msg {
	return predicate.Msg(sql.FieldNotIn(FieldSeq, vs...))
}

// SeqGT applies the GT predicate on the "seq" field.
func SeqGT(v int32) predicate.Msg {
	return predicate.Msg(sql.FieldGT(FieldSeq, v))
}

// SeqGTE applies the GTE predicate on the "seq" field.
func SeqGTE(v int32) predicate.Msg {
	return predicate.Msg(sql.FieldGTE(FieldSeq, v))
}

// SeqLT applies the LT predicate on the "seq" field.
func SeqLT(v int32) predicate.Msg {
	return predicate.Msg(sql.FieldLT(FieldSeq, v))
}

// SeqLTE applies the LTE predicate on the "seq" field.
func SeqLTE(v int32) predicate.Msg {
	return predicate.Msg(sql.FieldLTE(FieldSeq, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enums.MessageStatus) predicate.Msg {
	vc := v
	return predicate.Msg(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enums.MessageStatus) predicate.Msg {
	vc := v
	return predicate.Msg(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enums.MessageStatus) predicate.Msg {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Msg(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enums.MessageStatus) predicate.Msg {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Msg(sql.FieldNotIn(FieldStatus, v...))
}

// TextElemEQ applies the EQ predicate on the "text_elem" field.
func TextElemEQ(v string) predicate.Msg {
	return predicate.Msg(sql.FieldEQ(FieldTextElem, v))
}

// TextElemNEQ applies the NEQ predicate on the "text_elem" field.
func TextElemNEQ(v string) predicate.Msg {
	return predicate.Msg(sql.FieldNEQ(FieldTextElem, v))
}

// TextElemIn applies the In predicate on the "text_elem" field.
func TextElemIn(vs ...string) predicate.Msg {
	return predicate.Msg(sql.FieldIn(FieldTextElem, vs...))
}

// TextElemNotIn applies the NotIn predicate on the "text_elem" field.
func TextElemNotIn(vs ...string) predicate.Msg {
	return predicate.Msg(sql.FieldNotIn(FieldTextElem, vs...))
}

// TextElemGT applies the GT predicate on the "text_elem" field.
func TextElemGT(v string) predicate.Msg {
	return predicate.Msg(sql.FieldGT(FieldTextElem, v))
}

// TextElemGTE applies the GTE predicate on the "text_elem" field.
func TextElemGTE(v string) predicate.Msg {
	return predicate.Msg(sql.FieldGTE(FieldTextElem, v))
}

// TextElemLT applies the LT predicate on the "text_elem" field.
func TextElemLT(v string) predicate.Msg {
	return predicate.Msg(sql.FieldLT(FieldTextElem, v))
}

// TextElemLTE applies the LTE predicate on the "text_elem" field.
func TextElemLTE(v string) predicate.Msg {
	return predicate.Msg(sql.FieldLTE(FieldTextElem, v))
}

// TextElemContains applies the Contains predicate on the "text_elem" field.
func TextElemContains(v string) predicate.Msg {
	return predicate.Msg(sql.FieldContains(FieldTextElem, v))
}

// TextElemHasPrefix applies the HasPrefix predicate on the "text_elem" field.
func TextElemHasPrefix(v string) predicate.Msg {
	return predicate.Msg(sql.FieldHasPrefix(FieldTextElem, v))
}

// TextElemHasSuffix applies the HasSuffix predicate on the "text_elem" field.
func TextElemHasSuffix(v string) predicate.Msg {
	return predicate.Msg(sql.FieldHasSuffix(FieldTextElem, v))
}

// TextElemEqualFold applies the EqualFold predicate on the "text_elem" field.
func TextElemEqualFold(v string) predicate.Msg {
	return predicate.Msg(sql.FieldEqualFold(FieldTextElem, v))
}

// TextElemContainsFold applies the ContainsFold predicate on the "text_elem" field.
func TextElemContainsFold(v string) predicate.Msg {
	return predicate.Msg(sql.FieldContainsFold(FieldTextElem, v))
}

// HasSendUser applies the HasEdge predicate on the "send_user" edge.
func HasSendUser() predicate.Msg {
	return predicate.Msg(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SendUserTable, SendUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSendUserWith applies the HasEdge predicate on the "send_user" edge with a given conditions (other predicates).
func HasSendUserWith(preds ...predicate.User) predicate.Msg {
	return predicate.Msg(func(s *sql.Selector) {
		step := newSendUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReceiveUser applies the HasEdge predicate on the "receive_user" edge.
func HasReceiveUser() predicate.Msg {
	return predicate.Msg(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReceiveUserTable, ReceiveUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceiveUserWith applies the HasEdge predicate on the "receive_user" edge with a given conditions (other predicates).
func HasReceiveUserWith(preds ...predicate.User) predicate.Msg {
	return predicate.Msg(func(s *sql.Selector) {
		step := newReceiveUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Msg) predicate.Msg {
	return predicate.Msg(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Msg) predicate.Msg {
	return predicate.Msg(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Msg) predicate.Msg {
	return predicate.Msg(sql.NotPredicates(p))
}
