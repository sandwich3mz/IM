// Code generated by ent, DO NOT EDIT.

package ent

import (
	"IM/internel/db/ent/msg"
	"IM/internel/db/ent/predicate"
	"IM/internel/db/ent/user"
	"IM/internel/types/enums"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MsgUpdate is the builder for updating Msg entities.
type MsgUpdate struct {
	config
	hooks    []Hook
	mutation *MsgMutation
}

// Where appends a list predicates to the MsgUpdate builder.
func (mu *MsgUpdate) Where(ps ...predicate.Msg) *MsgUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MsgUpdate) SetUpdatedAt(t time.Time) *MsgUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetDeletedAt sets the "deleted_at" field.
func (mu *MsgUpdate) SetDeletedAt(t time.Time) *MsgUpdate {
	mu.mutation.SetDeletedAt(t)
	return mu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mu *MsgUpdate) SetNillableDeletedAt(t *time.Time) *MsgUpdate {
	if t != nil {
		mu.SetDeletedAt(*t)
	}
	return mu
}

// SetSendAt sets the "send_at" field.
func (mu *MsgUpdate) SetSendAt(t time.Time) *MsgUpdate {
	mu.mutation.SetSendAt(t)
	return mu
}

// SetNillableSendAt sets the "send_at" field if the given value is not nil.
func (mu *MsgUpdate) SetNillableSendAt(t *time.Time) *MsgUpdate {
	if t != nil {
		mu.SetSendAt(*t)
	}
	return mu
}

// SetSessionType sets the "session_type" field.
func (mu *MsgUpdate) SetSessionType(et enums.SessionType) *MsgUpdate {
	mu.mutation.SetSessionType(et)
	return mu
}

// SetNillableSessionType sets the "session_type" field if the given value is not nil.
func (mu *MsgUpdate) SetNillableSessionType(et *enums.SessionType) *MsgUpdate {
	if et != nil {
		mu.SetSessionType(*et)
	}
	return mu
}

// SetSendID sets the "send_id" field.
func (mu *MsgUpdate) SetSendID(i int64) *MsgUpdate {
	mu.mutation.SetSendID(i)
	return mu
}

// SetNillableSendID sets the "send_id" field if the given value is not nil.
func (mu *MsgUpdate) SetNillableSendID(i *int64) *MsgUpdate {
	if i != nil {
		mu.SetSendID(*i)
	}
	return mu
}

// SetReceiveID sets the "receive_id" field.
func (mu *MsgUpdate) SetReceiveID(i int64) *MsgUpdate {
	mu.mutation.SetReceiveID(i)
	return mu
}

// SetNillableReceiveID sets the "receive_id" field if the given value is not nil.
func (mu *MsgUpdate) SetNillableReceiveID(i *int64) *MsgUpdate {
	if i != nil {
		mu.SetReceiveID(*i)
	}
	return mu
}

// SetContentType sets the "content_type" field.
func (mu *MsgUpdate) SetContentType(et enums.MessageType) *MsgUpdate {
	mu.mutation.SetContentType(et)
	return mu
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (mu *MsgUpdate) SetNillableContentType(et *enums.MessageType) *MsgUpdate {
	if et != nil {
		mu.SetContentType(*et)
	}
	return mu
}

// SetSeq sets the "seq" field.
func (mu *MsgUpdate) SetSeq(i int32) *MsgUpdate {
	mu.mutation.ResetSeq()
	mu.mutation.SetSeq(i)
	return mu
}

// SetNillableSeq sets the "seq" field if the given value is not nil.
func (mu *MsgUpdate) SetNillableSeq(i *int32) *MsgUpdate {
	if i != nil {
		mu.SetSeq(*i)
	}
	return mu
}

// AddSeq adds i to the "seq" field.
func (mu *MsgUpdate) AddSeq(i int32) *MsgUpdate {
	mu.mutation.AddSeq(i)
	return mu
}

// SetStatus sets the "status" field.
func (mu *MsgUpdate) SetStatus(es enums.MessageStatus) *MsgUpdate {
	mu.mutation.SetStatus(es)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *MsgUpdate) SetNillableStatus(es *enums.MessageStatus) *MsgUpdate {
	if es != nil {
		mu.SetStatus(*es)
	}
	return mu
}

// SetTextElem sets the "text_elem" field.
func (mu *MsgUpdate) SetTextElem(s string) *MsgUpdate {
	mu.mutation.SetTextElem(s)
	return mu
}

// SetNillableTextElem sets the "text_elem" field if the given value is not nil.
func (mu *MsgUpdate) SetNillableTextElem(s *string) *MsgUpdate {
	if s != nil {
		mu.SetTextElem(*s)
	}
	return mu
}

// SetSendUserID sets the "send_user" edge to the User entity by ID.
func (mu *MsgUpdate) SetSendUserID(id int64) *MsgUpdate {
	mu.mutation.SetSendUserID(id)
	return mu
}

// SetSendUser sets the "send_user" edge to the User entity.
func (mu *MsgUpdate) SetSendUser(u *User) *MsgUpdate {
	return mu.SetSendUserID(u.ID)
}

// SetReceiveUserID sets the "receive_user" edge to the User entity by ID.
func (mu *MsgUpdate) SetReceiveUserID(id int64) *MsgUpdate {
	mu.mutation.SetReceiveUserID(id)
	return mu
}

// SetReceiveUser sets the "receive_user" edge to the User entity.
func (mu *MsgUpdate) SetReceiveUser(u *User) *MsgUpdate {
	return mu.SetReceiveUserID(u.ID)
}

// Mutation returns the MsgMutation object of the builder.
func (mu *MsgUpdate) Mutation() *MsgMutation {
	return mu.mutation
}

// ClearSendUser clears the "send_user" edge to the User entity.
func (mu *MsgUpdate) ClearSendUser() *MsgUpdate {
	mu.mutation.ClearSendUser()
	return mu
}

// ClearReceiveUser clears the "receive_user" edge to the User entity.
func (mu *MsgUpdate) ClearReceiveUser() *MsgUpdate {
	mu.mutation.ClearReceiveUser()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MsgUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MsgUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MsgUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MsgUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MsgUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := msg.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MsgUpdate) check() error {
	if v, ok := mu.mutation.SessionType(); ok {
		if err := msg.SessionTypeValidator(v); err != nil {
			return &ValidationError{Name: "session_type", err: fmt.Errorf(`ent: validator failed for field "Msg.session_type": %w`, err)}
		}
	}
	if v, ok := mu.mutation.ContentType(); ok {
		if err := msg.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "content_type", err: fmt.Errorf(`ent: validator failed for field "Msg.content_type": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Status(); ok {
		if err := msg.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Msg.status": %w`, err)}
		}
	}
	if _, ok := mu.mutation.SendUserID(); mu.mutation.SendUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Msg.send_user"`)
	}
	if _, ok := mu.mutation.ReceiveUserID(); mu.mutation.ReceiveUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Msg.receive_user"`)
	}
	return nil
}

func (mu *MsgUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(msg.Table, msg.Columns, sqlgraph.NewFieldSpec(msg.FieldID, field.TypeInt64))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(msg.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.DeletedAt(); ok {
		_spec.SetField(msg.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.SendAt(); ok {
		_spec.SetField(msg.FieldSendAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.SessionType(); ok {
		_spec.SetField(msg.FieldSessionType, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.ContentType(); ok {
		_spec.SetField(msg.FieldContentType, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.Seq(); ok {
		_spec.SetField(msg.FieldSeq, field.TypeInt32, value)
	}
	if value, ok := mu.mutation.AddedSeq(); ok {
		_spec.AddField(msg.FieldSeq, field.TypeInt32, value)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(msg.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.TextElem(); ok {
		_spec.SetField(msg.FieldTextElem, field.TypeString, value)
	}
	if mu.mutation.SendUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msg.SendUserTable,
			Columns: []string{msg.SendUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.SendUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msg.SendUserTable,
			Columns: []string{msg.SendUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ReceiveUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msg.ReceiveUserTable,
			Columns: []string{msg.ReceiveUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ReceiveUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msg.ReceiveUserTable,
			Columns: []string{msg.ReceiveUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MsgUpdateOne is the builder for updating a single Msg entity.
type MsgUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MsgMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MsgUpdateOne) SetUpdatedAt(t time.Time) *MsgUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetDeletedAt sets the "deleted_at" field.
func (muo *MsgUpdateOne) SetDeletedAt(t time.Time) *MsgUpdateOne {
	muo.mutation.SetDeletedAt(t)
	return muo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableDeletedAt(t *time.Time) *MsgUpdateOne {
	if t != nil {
		muo.SetDeletedAt(*t)
	}
	return muo
}

// SetSendAt sets the "send_at" field.
func (muo *MsgUpdateOne) SetSendAt(t time.Time) *MsgUpdateOne {
	muo.mutation.SetSendAt(t)
	return muo
}

// SetNillableSendAt sets the "send_at" field if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableSendAt(t *time.Time) *MsgUpdateOne {
	if t != nil {
		muo.SetSendAt(*t)
	}
	return muo
}

// SetSessionType sets the "session_type" field.
func (muo *MsgUpdateOne) SetSessionType(et enums.SessionType) *MsgUpdateOne {
	muo.mutation.SetSessionType(et)
	return muo
}

// SetNillableSessionType sets the "session_type" field if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableSessionType(et *enums.SessionType) *MsgUpdateOne {
	if et != nil {
		muo.SetSessionType(*et)
	}
	return muo
}

// SetSendID sets the "send_id" field.
func (muo *MsgUpdateOne) SetSendID(i int64) *MsgUpdateOne {
	muo.mutation.SetSendID(i)
	return muo
}

// SetNillableSendID sets the "send_id" field if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableSendID(i *int64) *MsgUpdateOne {
	if i != nil {
		muo.SetSendID(*i)
	}
	return muo
}

// SetReceiveID sets the "receive_id" field.
func (muo *MsgUpdateOne) SetReceiveID(i int64) *MsgUpdateOne {
	muo.mutation.SetReceiveID(i)
	return muo
}

// SetNillableReceiveID sets the "receive_id" field if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableReceiveID(i *int64) *MsgUpdateOne {
	if i != nil {
		muo.SetReceiveID(*i)
	}
	return muo
}

// SetContentType sets the "content_type" field.
func (muo *MsgUpdateOne) SetContentType(et enums.MessageType) *MsgUpdateOne {
	muo.mutation.SetContentType(et)
	return muo
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableContentType(et *enums.MessageType) *MsgUpdateOne {
	if et != nil {
		muo.SetContentType(*et)
	}
	return muo
}

// SetSeq sets the "seq" field.
func (muo *MsgUpdateOne) SetSeq(i int32) *MsgUpdateOne {
	muo.mutation.ResetSeq()
	muo.mutation.SetSeq(i)
	return muo
}

// SetNillableSeq sets the "seq" field if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableSeq(i *int32) *MsgUpdateOne {
	if i != nil {
		muo.SetSeq(*i)
	}
	return muo
}

// AddSeq adds i to the "seq" field.
func (muo *MsgUpdateOne) AddSeq(i int32) *MsgUpdateOne {
	muo.mutation.AddSeq(i)
	return muo
}

// SetStatus sets the "status" field.
func (muo *MsgUpdateOne) SetStatus(es enums.MessageStatus) *MsgUpdateOne {
	muo.mutation.SetStatus(es)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableStatus(es *enums.MessageStatus) *MsgUpdateOne {
	if es != nil {
		muo.SetStatus(*es)
	}
	return muo
}

// SetTextElem sets the "text_elem" field.
func (muo *MsgUpdateOne) SetTextElem(s string) *MsgUpdateOne {
	muo.mutation.SetTextElem(s)
	return muo
}

// SetNillableTextElem sets the "text_elem" field if the given value is not nil.
func (muo *MsgUpdateOne) SetNillableTextElem(s *string) *MsgUpdateOne {
	if s != nil {
		muo.SetTextElem(*s)
	}
	return muo
}

// SetSendUserID sets the "send_user" edge to the User entity by ID.
func (muo *MsgUpdateOne) SetSendUserID(id int64) *MsgUpdateOne {
	muo.mutation.SetSendUserID(id)
	return muo
}

// SetSendUser sets the "send_user" edge to the User entity.
func (muo *MsgUpdateOne) SetSendUser(u *User) *MsgUpdateOne {
	return muo.SetSendUserID(u.ID)
}

// SetReceiveUserID sets the "receive_user" edge to the User entity by ID.
func (muo *MsgUpdateOne) SetReceiveUserID(id int64) *MsgUpdateOne {
	muo.mutation.SetReceiveUserID(id)
	return muo
}

// SetReceiveUser sets the "receive_user" edge to the User entity.
func (muo *MsgUpdateOne) SetReceiveUser(u *User) *MsgUpdateOne {
	return muo.SetReceiveUserID(u.ID)
}

// Mutation returns the MsgMutation object of the builder.
func (muo *MsgUpdateOne) Mutation() *MsgMutation {
	return muo.mutation
}

// ClearSendUser clears the "send_user" edge to the User entity.
func (muo *MsgUpdateOne) ClearSendUser() *MsgUpdateOne {
	muo.mutation.ClearSendUser()
	return muo
}

// ClearReceiveUser clears the "receive_user" edge to the User entity.
func (muo *MsgUpdateOne) ClearReceiveUser() *MsgUpdateOne {
	muo.mutation.ClearReceiveUser()
	return muo
}

// Where appends a list predicates to the MsgUpdate builder.
func (muo *MsgUpdateOne) Where(ps ...predicate.Msg) *MsgUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MsgUpdateOne) Select(field string, fields ...string) *MsgUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Msg entity.
func (muo *MsgUpdateOne) Save(ctx context.Context) (*Msg, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MsgUpdateOne) SaveX(ctx context.Context) *Msg {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MsgUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MsgUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MsgUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := msg.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MsgUpdateOne) check() error {
	if v, ok := muo.mutation.SessionType(); ok {
		if err := msg.SessionTypeValidator(v); err != nil {
			return &ValidationError{Name: "session_type", err: fmt.Errorf(`ent: validator failed for field "Msg.session_type": %w`, err)}
		}
	}
	if v, ok := muo.mutation.ContentType(); ok {
		if err := msg.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "content_type", err: fmt.Errorf(`ent: validator failed for field "Msg.content_type": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Status(); ok {
		if err := msg.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Msg.status": %w`, err)}
		}
	}
	if _, ok := muo.mutation.SendUserID(); muo.mutation.SendUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Msg.send_user"`)
	}
	if _, ok := muo.mutation.ReceiveUserID(); muo.mutation.ReceiveUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Msg.receive_user"`)
	}
	return nil
}

func (muo *MsgUpdateOne) sqlSave(ctx context.Context) (_node *Msg, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(msg.Table, msg.Columns, sqlgraph.NewFieldSpec(msg.FieldID, field.TypeInt64))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Msg.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, msg.FieldID)
		for _, f := range fields {
			if !msg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != msg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(msg.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.DeletedAt(); ok {
		_spec.SetField(msg.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.SendAt(); ok {
		_spec.SetField(msg.FieldSendAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.SessionType(); ok {
		_spec.SetField(msg.FieldSessionType, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.ContentType(); ok {
		_spec.SetField(msg.FieldContentType, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.Seq(); ok {
		_spec.SetField(msg.FieldSeq, field.TypeInt32, value)
	}
	if value, ok := muo.mutation.AddedSeq(); ok {
		_spec.AddField(msg.FieldSeq, field.TypeInt32, value)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(msg.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.TextElem(); ok {
		_spec.SetField(msg.FieldTextElem, field.TypeString, value)
	}
	if muo.mutation.SendUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msg.SendUserTable,
			Columns: []string{msg.SendUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.SendUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msg.SendUserTable,
			Columns: []string{msg.SendUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ReceiveUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msg.ReceiveUserTable,
			Columns: []string{msg.ReceiveUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ReceiveUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msg.ReceiveUserTable,
			Columns: []string{msg.ReceiveUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Msg{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
