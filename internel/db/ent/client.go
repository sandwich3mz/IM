// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"IM/internel/db/ent/migrate"

	"IM/internel/db/ent/friend"
	"IM/internel/db/ent/friendapply"
	"IM/internel/db/ent/friendgroup"
	"IM/internel/db/ent/group"
	"IM/internel/db/ent/groupmember"
	"IM/internel/db/ent/msg"
	"IM/internel/db/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Friend is the client for interacting with the Friend builders.
	Friend *FriendClient
	// FriendApply is the client for interacting with the FriendApply builders.
	FriendApply *FriendApplyClient
	// FriendGroup is the client for interacting with the FriendGroup builders.
	FriendGroup *FriendGroupClient
	// Group is the client for interacting with the Group builders.
	Group *GroupClient
	// GroupMember is the client for interacting with the GroupMember builders.
	GroupMember *GroupMemberClient
	// Msg is the client for interacting with the Msg builders.
	Msg *MsgClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Friend = NewFriendClient(c.config)
	c.FriendApply = NewFriendApplyClient(c.config)
	c.FriendGroup = NewFriendGroupClient(c.config)
	c.Group = NewGroupClient(c.config)
	c.GroupMember = NewGroupMemberClient(c.config)
	c.Msg = NewMsgClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Friend:      NewFriendClient(cfg),
		FriendApply: NewFriendApplyClient(cfg),
		FriendGroup: NewFriendGroupClient(cfg),
		Group:       NewGroupClient(cfg),
		GroupMember: NewGroupMemberClient(cfg),
		Msg:         NewMsgClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Friend:      NewFriendClient(cfg),
		FriendApply: NewFriendApplyClient(cfg),
		FriendGroup: NewFriendGroupClient(cfg),
		Group:       NewGroupClient(cfg),
		GroupMember: NewGroupMemberClient(cfg),
		Msg:         NewMsgClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Friend.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Friend, c.FriendApply, c.FriendGroup, c.Group, c.GroupMember, c.Msg, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Friend, c.FriendApply, c.FriendGroup, c.Group, c.GroupMember, c.Msg, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *FriendMutation:
		return c.Friend.mutate(ctx, m)
	case *FriendApplyMutation:
		return c.FriendApply.mutate(ctx, m)
	case *FriendGroupMutation:
		return c.FriendGroup.mutate(ctx, m)
	case *GroupMutation:
		return c.Group.mutate(ctx, m)
	case *GroupMemberMutation:
		return c.GroupMember.mutate(ctx, m)
	case *MsgMutation:
		return c.Msg.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// FriendClient is a client for the Friend schema.
type FriendClient struct {
	config
}

// NewFriendClient returns a client for the Friend from the given config.
func NewFriendClient(c config) *FriendClient {
	return &FriendClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `friend.Hooks(f(g(h())))`.
func (c *FriendClient) Use(hooks ...Hook) {
	c.hooks.Friend = append(c.hooks.Friend, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `friend.Intercept(f(g(h())))`.
func (c *FriendClient) Intercept(interceptors ...Interceptor) {
	c.inters.Friend = append(c.inters.Friend, interceptors...)
}

// Create returns a builder for creating a Friend entity.
func (c *FriendClient) Create() *FriendCreate {
	mutation := newFriendMutation(c.config, OpCreate)
	return &FriendCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Friend entities.
func (c *FriendClient) CreateBulk(builders ...*FriendCreate) *FriendCreateBulk {
	return &FriendCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FriendClient) MapCreateBulk(slice any, setFunc func(*FriendCreate, int)) *FriendCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FriendCreateBulk{err: fmt.Errorf("calling to FriendClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FriendCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FriendCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Friend.
func (c *FriendClient) Update() *FriendUpdate {
	mutation := newFriendMutation(c.config, OpUpdate)
	return &FriendUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FriendClient) UpdateOne(f *Friend) *FriendUpdateOne {
	mutation := newFriendMutation(c.config, OpUpdateOne, withFriend(f))
	return &FriendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FriendClient) UpdateOneID(id int64) *FriendUpdateOne {
	mutation := newFriendMutation(c.config, OpUpdateOne, withFriendID(id))
	return &FriendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Friend.
func (c *FriendClient) Delete() *FriendDelete {
	mutation := newFriendMutation(c.config, OpDelete)
	return &FriendDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FriendClient) DeleteOne(f *Friend) *FriendDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FriendClient) DeleteOneID(id int64) *FriendDeleteOne {
	builder := c.Delete().Where(friend.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FriendDeleteOne{builder}
}

// Query returns a query builder for Friend.
func (c *FriendClient) Query() *FriendQuery {
	return &FriendQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFriend},
		inters: c.Interceptors(),
	}
}

// Get returns a Friend entity by its id.
func (c *FriendClient) Get(ctx context.Context, id int64) (*Friend, error) {
	return c.Query().Where(friend.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FriendClient) GetX(ctx context.Context, id int64) *Friend {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwnerUser queries the owner_user edge of a Friend.
func (c *FriendClient) QueryOwnerUser(f *Friend) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friend.Table, friend.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, friend.OwnerUserTable, friend.OwnerUserColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFriendUser queries the friend_user edge of a Friend.
func (c *FriendClient) QueryFriendUser(f *Friend) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friend.Table, friend.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, friend.FriendUserTable, friend.FriendUserColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFriendGroupFriend queries the friend_group_friend edge of a Friend.
func (c *FriendClient) QueryFriendGroupFriend(f *Friend) *FriendGroupQuery {
	query := (&FriendGroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friend.Table, friend.FieldID, id),
			sqlgraph.To(friendgroup.Table, friendgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, friend.FriendGroupFriendTable, friend.FriendGroupFriendColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FriendClient) Hooks() []Hook {
	return c.hooks.Friend
}

// Interceptors returns the client interceptors.
func (c *FriendClient) Interceptors() []Interceptor {
	return c.inters.Friend
}

func (c *FriendClient) mutate(ctx context.Context, m *FriendMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FriendCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FriendUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FriendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FriendDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Friend mutation op: %q", m.Op())
	}
}

// FriendApplyClient is a client for the FriendApply schema.
type FriendApplyClient struct {
	config
}

// NewFriendApplyClient returns a client for the FriendApply from the given config.
func NewFriendApplyClient(c config) *FriendApplyClient {
	return &FriendApplyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `friendapply.Hooks(f(g(h())))`.
func (c *FriendApplyClient) Use(hooks ...Hook) {
	c.hooks.FriendApply = append(c.hooks.FriendApply, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `friendapply.Intercept(f(g(h())))`.
func (c *FriendApplyClient) Intercept(interceptors ...Interceptor) {
	c.inters.FriendApply = append(c.inters.FriendApply, interceptors...)
}

// Create returns a builder for creating a FriendApply entity.
func (c *FriendApplyClient) Create() *FriendApplyCreate {
	mutation := newFriendApplyMutation(c.config, OpCreate)
	return &FriendApplyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FriendApply entities.
func (c *FriendApplyClient) CreateBulk(builders ...*FriendApplyCreate) *FriendApplyCreateBulk {
	return &FriendApplyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FriendApplyClient) MapCreateBulk(slice any, setFunc func(*FriendApplyCreate, int)) *FriendApplyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FriendApplyCreateBulk{err: fmt.Errorf("calling to FriendApplyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FriendApplyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FriendApplyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FriendApply.
func (c *FriendApplyClient) Update() *FriendApplyUpdate {
	mutation := newFriendApplyMutation(c.config, OpUpdate)
	return &FriendApplyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FriendApplyClient) UpdateOne(fa *FriendApply) *FriendApplyUpdateOne {
	mutation := newFriendApplyMutation(c.config, OpUpdateOne, withFriendApply(fa))
	return &FriendApplyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FriendApplyClient) UpdateOneID(id int64) *FriendApplyUpdateOne {
	mutation := newFriendApplyMutation(c.config, OpUpdateOne, withFriendApplyID(id))
	return &FriendApplyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FriendApply.
func (c *FriendApplyClient) Delete() *FriendApplyDelete {
	mutation := newFriendApplyMutation(c.config, OpDelete)
	return &FriendApplyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FriendApplyClient) DeleteOne(fa *FriendApply) *FriendApplyDeleteOne {
	return c.DeleteOneID(fa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FriendApplyClient) DeleteOneID(id int64) *FriendApplyDeleteOne {
	builder := c.Delete().Where(friendapply.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FriendApplyDeleteOne{builder}
}

// Query returns a query builder for FriendApply.
func (c *FriendApplyClient) Query() *FriendApplyQuery {
	return &FriendApplyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFriendApply},
		inters: c.Interceptors(),
	}
}

// Get returns a FriendApply entity by its id.
func (c *FriendApplyClient) Get(ctx context.Context, id int64) (*FriendApply, error) {
	return c.Query().Where(friendapply.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FriendApplyClient) GetX(ctx context.Context, id int64) *FriendApply {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFromUser queries the from_user edge of a FriendApply.
func (c *FriendApplyClient) QueryFromUser(fa *FriendApply) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendapply.Table, friendapply.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, friendapply.FromUserTable, friendapply.FromUserColumn),
		)
		fromV = sqlgraph.Neighbors(fa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToUser queries the to_user edge of a FriendApply.
func (c *FriendApplyClient) QueryToUser(fa *FriendApply) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendapply.Table, friendapply.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, friendapply.ToUserTable, friendapply.ToUserColumn),
		)
		fromV = sqlgraph.Neighbors(fa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FriendApplyClient) Hooks() []Hook {
	return c.hooks.FriendApply
}

// Interceptors returns the client interceptors.
func (c *FriendApplyClient) Interceptors() []Interceptor {
	return c.inters.FriendApply
}

func (c *FriendApplyClient) mutate(ctx context.Context, m *FriendApplyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FriendApplyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FriendApplyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FriendApplyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FriendApplyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FriendApply mutation op: %q", m.Op())
	}
}

// FriendGroupClient is a client for the FriendGroup schema.
type FriendGroupClient struct {
	config
}

// NewFriendGroupClient returns a client for the FriendGroup from the given config.
func NewFriendGroupClient(c config) *FriendGroupClient {
	return &FriendGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `friendgroup.Hooks(f(g(h())))`.
func (c *FriendGroupClient) Use(hooks ...Hook) {
	c.hooks.FriendGroup = append(c.hooks.FriendGroup, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `friendgroup.Intercept(f(g(h())))`.
func (c *FriendGroupClient) Intercept(interceptors ...Interceptor) {
	c.inters.FriendGroup = append(c.inters.FriendGroup, interceptors...)
}

// Create returns a builder for creating a FriendGroup entity.
func (c *FriendGroupClient) Create() *FriendGroupCreate {
	mutation := newFriendGroupMutation(c.config, OpCreate)
	return &FriendGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FriendGroup entities.
func (c *FriendGroupClient) CreateBulk(builders ...*FriendGroupCreate) *FriendGroupCreateBulk {
	return &FriendGroupCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FriendGroupClient) MapCreateBulk(slice any, setFunc func(*FriendGroupCreate, int)) *FriendGroupCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FriendGroupCreateBulk{err: fmt.Errorf("calling to FriendGroupClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FriendGroupCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FriendGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FriendGroup.
func (c *FriendGroupClient) Update() *FriendGroupUpdate {
	mutation := newFriendGroupMutation(c.config, OpUpdate)
	return &FriendGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FriendGroupClient) UpdateOne(fg *FriendGroup) *FriendGroupUpdateOne {
	mutation := newFriendGroupMutation(c.config, OpUpdateOne, withFriendGroup(fg))
	return &FriendGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FriendGroupClient) UpdateOneID(id int64) *FriendGroupUpdateOne {
	mutation := newFriendGroupMutation(c.config, OpUpdateOne, withFriendGroupID(id))
	return &FriendGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FriendGroup.
func (c *FriendGroupClient) Delete() *FriendGroupDelete {
	mutation := newFriendGroupMutation(c.config, OpDelete)
	return &FriendGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FriendGroupClient) DeleteOne(fg *FriendGroup) *FriendGroupDeleteOne {
	return c.DeleteOneID(fg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FriendGroupClient) DeleteOneID(id int64) *FriendGroupDeleteOne {
	builder := c.Delete().Where(friendgroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FriendGroupDeleteOne{builder}
}

// Query returns a query builder for FriendGroup.
func (c *FriendGroupClient) Query() *FriendGroupQuery {
	return &FriendGroupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFriendGroup},
		inters: c.Interceptors(),
	}
}

// Get returns a FriendGroup entity by its id.
func (c *FriendGroupClient) Get(ctx context.Context, id int64) (*FriendGroup, error) {
	return c.Query().Where(friendgroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FriendGroupClient) GetX(ctx context.Context, id int64) *FriendGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFriends queries the friends edge of a FriendGroup.
func (c *FriendGroupClient) QueryFriends(fg *FriendGroup) *FriendQuery {
	query := (&FriendClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendgroup.Table, friendgroup.FieldID, id),
			sqlgraph.To(friend.Table, friend.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, friendgroup.FriendsTable, friendgroup.FriendsColumn),
		)
		fromV = sqlgraph.Neighbors(fg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFriendGroup queries the friend_group edge of a FriendGroup.
func (c *FriendGroupClient) QueryFriendGroup(fg *FriendGroup) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendgroup.Table, friendgroup.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, friendgroup.FriendGroupTable, friendgroup.FriendGroupColumn),
		)
		fromV = sqlgraph.Neighbors(fg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FriendGroupClient) Hooks() []Hook {
	return c.hooks.FriendGroup
}

// Interceptors returns the client interceptors.
func (c *FriendGroupClient) Interceptors() []Interceptor {
	return c.inters.FriendGroup
}

func (c *FriendGroupClient) mutate(ctx context.Context, m *FriendGroupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FriendGroupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FriendGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FriendGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FriendGroupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FriendGroup mutation op: %q", m.Op())
	}
}

// GroupClient is a client for the Group schema.
type GroupClient struct {
	config
}

// NewGroupClient returns a client for the Group from the given config.
func NewGroupClient(c config) *GroupClient {
	return &GroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `group.Hooks(f(g(h())))`.
func (c *GroupClient) Use(hooks ...Hook) {
	c.hooks.Group = append(c.hooks.Group, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `group.Intercept(f(g(h())))`.
func (c *GroupClient) Intercept(interceptors ...Interceptor) {
	c.inters.Group = append(c.inters.Group, interceptors...)
}

// Create returns a builder for creating a Group entity.
func (c *GroupClient) Create() *GroupCreate {
	mutation := newGroupMutation(c.config, OpCreate)
	return &GroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Group entities.
func (c *GroupClient) CreateBulk(builders ...*GroupCreate) *GroupCreateBulk {
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GroupClient) MapCreateBulk(slice any, setFunc func(*GroupCreate, int)) *GroupCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GroupCreateBulk{err: fmt.Errorf("calling to GroupClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GroupCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Group.
func (c *GroupClient) Update() *GroupUpdate {
	mutation := newGroupMutation(c.config, OpUpdate)
	return &GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupClient) UpdateOne(gr *Group) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroup(gr))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupClient) UpdateOneID(id int64) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroupID(id))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Group.
func (c *GroupClient) Delete() *GroupDelete {
	mutation := newGroupMutation(c.config, OpDelete)
	return &GroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupClient) DeleteOne(gr *Group) *GroupDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupClient) DeleteOneID(id int64) *GroupDeleteOne {
	builder := c.Delete().Where(group.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupDeleteOne{builder}
}

// Query returns a query builder for Group.
func (c *GroupClient) Query() *GroupQuery {
	return &GroupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroup},
		inters: c.Interceptors(),
	}
}

// Get returns a Group entity by its id.
func (c *GroupClient) Get(ctx context.Context, id int64) (*Group, error) {
	return c.Query().Where(group.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupClient) GetX(ctx context.Context, id int64) *Group {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwnerUser queries the owner_user edge of a Group.
func (c *GroupClient) QueryOwnerUser(gr *Group) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, group.OwnerUserTable, group.OwnerUserColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroupMember queries the group_member edge of a Group.
func (c *GroupClient) QueryGroupMember(gr *Group) *GroupMemberQuery {
	query := (&GroupMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(groupmember.Table, groupmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, group.GroupMemberTable, group.GroupMemberColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupClient) Hooks() []Hook {
	return c.hooks.Group
}

// Interceptors returns the client interceptors.
func (c *GroupClient) Interceptors() []Interceptor {
	return c.inters.Group
}

func (c *GroupClient) mutate(ctx context.Context, m *GroupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Group mutation op: %q", m.Op())
	}
}

// GroupMemberClient is a client for the GroupMember schema.
type GroupMemberClient struct {
	config
}

// NewGroupMemberClient returns a client for the GroupMember from the given config.
func NewGroupMemberClient(c config) *GroupMemberClient {
	return &GroupMemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groupmember.Hooks(f(g(h())))`.
func (c *GroupMemberClient) Use(hooks ...Hook) {
	c.hooks.GroupMember = append(c.hooks.GroupMember, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `groupmember.Intercept(f(g(h())))`.
func (c *GroupMemberClient) Intercept(interceptors ...Interceptor) {
	c.inters.GroupMember = append(c.inters.GroupMember, interceptors...)
}

// Create returns a builder for creating a GroupMember entity.
func (c *GroupMemberClient) Create() *GroupMemberCreate {
	mutation := newGroupMemberMutation(c.config, OpCreate)
	return &GroupMemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GroupMember entities.
func (c *GroupMemberClient) CreateBulk(builders ...*GroupMemberCreate) *GroupMemberCreateBulk {
	return &GroupMemberCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GroupMemberClient) MapCreateBulk(slice any, setFunc func(*GroupMemberCreate, int)) *GroupMemberCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GroupMemberCreateBulk{err: fmt.Errorf("calling to GroupMemberClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GroupMemberCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GroupMemberCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GroupMember.
func (c *GroupMemberClient) Update() *GroupMemberUpdate {
	mutation := newGroupMemberMutation(c.config, OpUpdate)
	return &GroupMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupMemberClient) UpdateOne(gm *GroupMember) *GroupMemberUpdateOne {
	mutation := newGroupMemberMutation(c.config, OpUpdateOne, withGroupMember(gm))
	return &GroupMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupMemberClient) UpdateOneID(id int64) *GroupMemberUpdateOne {
	mutation := newGroupMemberMutation(c.config, OpUpdateOne, withGroupMemberID(id))
	return &GroupMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroupMember.
func (c *GroupMemberClient) Delete() *GroupMemberDelete {
	mutation := newGroupMemberMutation(c.config, OpDelete)
	return &GroupMemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupMemberClient) DeleteOne(gm *GroupMember) *GroupMemberDeleteOne {
	return c.DeleteOneID(gm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupMemberClient) DeleteOneID(id int64) *GroupMemberDeleteOne {
	builder := c.Delete().Where(groupmember.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupMemberDeleteOne{builder}
}

// Query returns a query builder for GroupMember.
func (c *GroupMemberClient) Query() *GroupMemberQuery {
	return &GroupMemberQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroupMember},
		inters: c.Interceptors(),
	}
}

// Get returns a GroupMember entity by its id.
func (c *GroupMemberClient) Get(ctx context.Context, id int64) (*GroupMember, error) {
	return c.Query().Where(groupmember.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupMemberClient) GetX(ctx context.Context, id int64) *GroupMember {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGroupUser queries the group_user edge of a GroupMember.
func (c *GroupMemberClient) QueryGroupUser(gm *GroupMember) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groupmember.Table, groupmember.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, groupmember.GroupUserTable, groupmember.GroupUserColumn),
		)
		fromV = sqlgraph.Neighbors(gm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMemberGroup queries the member_group edge of a GroupMember.
func (c *GroupMemberClient) QueryMemberGroup(gm *GroupMember) *GroupQuery {
	query := (&GroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groupmember.Table, groupmember.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, groupmember.MemberGroupTable, groupmember.MemberGroupColumn),
		)
		fromV = sqlgraph.Neighbors(gm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupMemberClient) Hooks() []Hook {
	return c.hooks.GroupMember
}

// Interceptors returns the client interceptors.
func (c *GroupMemberClient) Interceptors() []Interceptor {
	return c.inters.GroupMember
}

func (c *GroupMemberClient) mutate(ctx context.Context, m *GroupMemberMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupMemberCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupMemberDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GroupMember mutation op: %q", m.Op())
	}
}

// MsgClient is a client for the Msg schema.
type MsgClient struct {
	config
}

// NewMsgClient returns a client for the Msg from the given config.
func NewMsgClient(c config) *MsgClient {
	return &MsgClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `msg.Hooks(f(g(h())))`.
func (c *MsgClient) Use(hooks ...Hook) {
	c.hooks.Msg = append(c.hooks.Msg, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `msg.Intercept(f(g(h())))`.
func (c *MsgClient) Intercept(interceptors ...Interceptor) {
	c.inters.Msg = append(c.inters.Msg, interceptors...)
}

// Create returns a builder for creating a Msg entity.
func (c *MsgClient) Create() *MsgCreate {
	mutation := newMsgMutation(c.config, OpCreate)
	return &MsgCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Msg entities.
func (c *MsgClient) CreateBulk(builders ...*MsgCreate) *MsgCreateBulk {
	return &MsgCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MsgClient) MapCreateBulk(slice any, setFunc func(*MsgCreate, int)) *MsgCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MsgCreateBulk{err: fmt.Errorf("calling to MsgClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MsgCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MsgCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Msg.
func (c *MsgClient) Update() *MsgUpdate {
	mutation := newMsgMutation(c.config, OpUpdate)
	return &MsgUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MsgClient) UpdateOne(m *Msg) *MsgUpdateOne {
	mutation := newMsgMutation(c.config, OpUpdateOne, withMsg(m))
	return &MsgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MsgClient) UpdateOneID(id int64) *MsgUpdateOne {
	mutation := newMsgMutation(c.config, OpUpdateOne, withMsgID(id))
	return &MsgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Msg.
func (c *MsgClient) Delete() *MsgDelete {
	mutation := newMsgMutation(c.config, OpDelete)
	return &MsgDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MsgClient) DeleteOne(m *Msg) *MsgDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MsgClient) DeleteOneID(id int64) *MsgDeleteOne {
	builder := c.Delete().Where(msg.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MsgDeleteOne{builder}
}

// Query returns a query builder for Msg.
func (c *MsgClient) Query() *MsgQuery {
	return &MsgQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMsg},
		inters: c.Interceptors(),
	}
}

// Get returns a Msg entity by its id.
func (c *MsgClient) Get(ctx context.Context, id int64) (*Msg, error) {
	return c.Query().Where(msg.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MsgClient) GetX(ctx context.Context, id int64) *Msg {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySendUser queries the send_user edge of a Msg.
func (c *MsgClient) QuerySendUser(m *Msg) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(msg.Table, msg.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, msg.SendUserTable, msg.SendUserColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReceiveUser queries the receive_user edge of a Msg.
func (c *MsgClient) QueryReceiveUser(m *Msg) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(msg.Table, msg.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, msg.ReceiveUserTable, msg.ReceiveUserColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MsgClient) Hooks() []Hook {
	return c.hooks.Msg
}

// Interceptors returns the client interceptors.
func (c *MsgClient) Interceptors() []Interceptor {
	return c.inters.Msg
}

func (c *MsgClient) mutate(ctx context.Context, m *MsgMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MsgCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MsgUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MsgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MsgDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Msg mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySendMsg queries the send_msg edge of a User.
func (c *UserClient) QuerySendMsg(u *User) *MsgQuery {
	query := (&MsgClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(msg.Table, msg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SendMsgTable, user.SendMsgColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReceiveMsg queries the receive_msg edge of a User.
func (c *UserClient) QueryReceiveMsg(u *User) *MsgQuery {
	query := (&MsgClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(msg.Table, msg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ReceiveMsgTable, user.ReceiveMsgColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwnerUserFriend queries the owner_user_friend edge of a User.
func (c *UserClient) QueryOwnerUserFriend(u *User) *FriendQuery {
	query := (&FriendClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(friend.Table, friend.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.OwnerUserFriendTable, user.OwnerUserFriendColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFriendUserFriend queries the friend_user_friend edge of a User.
func (c *UserClient) QueryFriendUserFriend(u *User) *FriendQuery {
	query := (&FriendClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(friend.Table, friend.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FriendUserFriendTable, user.FriendUserFriendColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserGroup queries the user_group edge of a User.
func (c *UserClient) QueryUserGroup(u *User) *GroupQuery {
	query := (&GroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserGroupTable, user.UserGroupColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserGroupMember queries the user_group_member edge of a User.
func (c *UserClient) QueryUserGroupMember(u *User) *GroupMemberQuery {
	query := (&GroupMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(groupmember.Table, groupmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserGroupMemberTable, user.UserGroupMemberColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySendApplyUser queries the send_apply_user edge of a User.
func (c *UserClient) QuerySendApplyUser(u *User) *FriendApplyQuery {
	query := (&FriendApplyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(friendapply.Table, friendapply.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SendApplyUserTable, user.SendApplyUserColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApplyUser queries the apply_user edge of a User.
func (c *UserClient) QueryApplyUser(u *User) *FriendApplyQuery {
	query := (&FriendApplyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(friendapply.Table, friendapply.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ApplyUserTable, user.ApplyUserColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFriendGroup queries the friend_group edge of a User.
func (c *UserClient) QueryFriendGroup(u *User) *FriendGroupQuery {
	query := (&FriendGroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(friendgroup.Table, friendgroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FriendGroupTable, user.FriendGroupColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Friend, FriendApply, FriendGroup, Group, GroupMember, Msg, User []ent.Hook
	}
	inters struct {
		Friend, FriendApply, FriendGroup, Group, GroupMember, Msg,
		User []ent.Interceptor
	}
)
