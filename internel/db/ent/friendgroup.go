// Code generated by ent, DO NOT EDIT.

package ent

import (
	"IM/internel/db/ent/friendgroup"
	"IM/internel/db/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FriendGroup is the model entity for the FriendGroup schema.
type FriendGroup struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 分组所有者 ID
	OwnerID int64 `json:"owner_id,string"`
	// 好友分组名称
	GroupName string `json:"group_name"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FriendGroupQuery when eager-loading is set.
	Edges        FriendGroupEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FriendGroupEdges holds the relations/edges for other nodes in the graph.
type FriendGroupEdges struct {
	// Friends holds the value of the friends edge.
	Friends []*Friend `json:"friends,omitempty"`
	// FriendGroup holds the value of the friend_group edge.
	FriendGroup *User `json:"friend_group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FriendsOrErr returns the Friends value or an error if the edge
// was not loaded in eager-loading.
func (e FriendGroupEdges) FriendsOrErr() ([]*Friend, error) {
	if e.loadedTypes[0] {
		return e.Friends, nil
	}
	return nil, &NotLoadedError{edge: "friends"}
}

// FriendGroupOrErr returns the FriendGroup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FriendGroupEdges) FriendGroupOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.FriendGroup == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.FriendGroup, nil
	}
	return nil, &NotLoadedError{edge: "friend_group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FriendGroup) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case friendgroup.FieldID, friendgroup.FieldOwnerID:
			values[i] = new(sql.NullInt64)
		case friendgroup.FieldGroupName:
			values[i] = new(sql.NullString)
		case friendgroup.FieldCreatedAt, friendgroup.FieldUpdatedAt, friendgroup.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FriendGroup fields.
func (fg *FriendGroup) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case friendgroup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fg.ID = int64(value.Int64)
		case friendgroup.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fg.CreatedAt = value.Time
			}
		case friendgroup.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fg.UpdatedAt = value.Time
			}
		case friendgroup.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fg.DeletedAt = value.Time
			}
		case friendgroup.FieldOwnerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				fg.OwnerID = value.Int64
			}
		case friendgroup.FieldGroupName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group_name", values[i])
			} else if value.Valid {
				fg.GroupName = value.String
			}
		default:
			fg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FriendGroup.
// This includes values selected through modifiers, order, etc.
func (fg *FriendGroup) Value(name string) (ent.Value, error) {
	return fg.selectValues.Get(name)
}

// QueryFriends queries the "friends" edge of the FriendGroup entity.
func (fg *FriendGroup) QueryFriends() *FriendQuery {
	return NewFriendGroupClient(fg.config).QueryFriends(fg)
}

// QueryFriendGroup queries the "friend_group" edge of the FriendGroup entity.
func (fg *FriendGroup) QueryFriendGroup() *UserQuery {
	return NewFriendGroupClient(fg.config).QueryFriendGroup(fg)
}

// Update returns a builder for updating this FriendGroup.
// Note that you need to call FriendGroup.Unwrap() before calling this method if this FriendGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (fg *FriendGroup) Update() *FriendGroupUpdateOne {
	return NewFriendGroupClient(fg.config).UpdateOne(fg)
}

// Unwrap unwraps the FriendGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fg *FriendGroup) Unwrap() *FriendGroup {
	_tx, ok := fg.config.driver.(*txDriver)
	if !ok {
		panic("ent: FriendGroup is not a transactional entity")
	}
	fg.config.driver = _tx.drv
	return fg
}

// String implements the fmt.Stringer.
func (fg *FriendGroup) String() string {
	var builder strings.Builder
	builder.WriteString("FriendGroup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fg.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fg.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fg.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fg.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(fmt.Sprintf("%v", fg.OwnerID))
	builder.WriteString(", ")
	builder.WriteString("group_name=")
	builder.WriteString(fg.GroupName)
	builder.WriteByte(')')
	return builder.String()
}

// FriendGroups is a parsable slice of FriendGroup.
type FriendGroups []*FriendGroup
