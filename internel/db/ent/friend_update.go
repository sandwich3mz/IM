// Code generated by ent, DO NOT EDIT.

package ent

import (
	"IM/internel/db/ent/friend"
	"IM/internel/db/ent/friendgroup"
	"IM/internel/db/ent/predicate"
	"IM/internel/db/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FriendUpdate is the builder for updating Friend entities.
type FriendUpdate struct {
	config
	hooks    []Hook
	mutation *FriendMutation
}

// Where appends a list predicates to the FriendUpdate builder.
func (fu *FriendUpdate) Where(ps ...predicate.Friend) *FriendUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FriendUpdate) SetUpdatedAt(t time.Time) *FriendUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetDeletedAt sets the "deleted_at" field.
func (fu *FriendUpdate) SetDeletedAt(t time.Time) *FriendUpdate {
	fu.mutation.SetDeletedAt(t)
	return fu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fu *FriendUpdate) SetNillableDeletedAt(t *time.Time) *FriendUpdate {
	if t != nil {
		fu.SetDeletedAt(*t)
	}
	return fu
}

// SetOwnerUserID sets the "owner_user_id" field.
func (fu *FriendUpdate) SetOwnerUserID(i int64) *FriendUpdate {
	fu.mutation.SetOwnerUserID(i)
	return fu
}

// SetNillableOwnerUserID sets the "owner_user_id" field if the given value is not nil.
func (fu *FriendUpdate) SetNillableOwnerUserID(i *int64) *FriendUpdate {
	if i != nil {
		fu.SetOwnerUserID(*i)
	}
	return fu
}

// SetFriendUserID sets the "friend_user_id" field.
func (fu *FriendUpdate) SetFriendUserID(i int64) *FriendUpdate {
	fu.mutation.SetFriendUserID(i)
	return fu
}

// SetNillableFriendUserID sets the "friend_user_id" field if the given value is not nil.
func (fu *FriendUpdate) SetNillableFriendUserID(i *int64) *FriendUpdate {
	if i != nil {
		fu.SetFriendUserID(*i)
	}
	return fu
}

// SetRelationship sets the "relationship" field.
func (fu *FriendUpdate) SetRelationship(i int8) *FriendUpdate {
	fu.mutation.ResetRelationship()
	fu.mutation.SetRelationship(i)
	return fu
}

// SetNillableRelationship sets the "relationship" field if the given value is not nil.
func (fu *FriendUpdate) SetNillableRelationship(i *int8) *FriendUpdate {
	if i != nil {
		fu.SetRelationship(*i)
	}
	return fu
}

// AddRelationship adds i to the "relationship" field.
func (fu *FriendUpdate) AddRelationship(i int8) *FriendUpdate {
	fu.mutation.AddRelationship(i)
	return fu
}

// SetRemark sets the "remark" field.
func (fu *FriendUpdate) SetRemark(s string) *FriendUpdate {
	fu.mutation.SetRemark(s)
	return fu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (fu *FriendUpdate) SetNillableRemark(s *string) *FriendUpdate {
	if s != nil {
		fu.SetRemark(*s)
	}
	return fu
}

// SetGroupID sets the "group_id" field.
func (fu *FriendUpdate) SetGroupID(i int64) *FriendUpdate {
	fu.mutation.SetGroupID(i)
	return fu
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (fu *FriendUpdate) SetNillableGroupID(i *int64) *FriendUpdate {
	if i != nil {
		fu.SetGroupID(*i)
	}
	return fu
}

// SetLastTalkAt sets the "last_talk_at" field.
func (fu *FriendUpdate) SetLastTalkAt(t time.Time) *FriendUpdate {
	fu.mutation.SetLastTalkAt(t)
	return fu
}

// SetNillableLastTalkAt sets the "last_talk_at" field if the given value is not nil.
func (fu *FriendUpdate) SetNillableLastTalkAt(t *time.Time) *FriendUpdate {
	if t != nil {
		fu.SetLastTalkAt(*t)
	}
	return fu
}

// SetOwnerUser sets the "owner_user" edge to the User entity.
func (fu *FriendUpdate) SetOwnerUser(u *User) *FriendUpdate {
	return fu.SetOwnerUserID(u.ID)
}

// SetFriendUser sets the "friend_user" edge to the User entity.
func (fu *FriendUpdate) SetFriendUser(u *User) *FriendUpdate {
	return fu.SetFriendUserID(u.ID)
}

// SetFriendGroupFriendID sets the "friend_group_friend" edge to the FriendGroup entity by ID.
func (fu *FriendUpdate) SetFriendGroupFriendID(id int64) *FriendUpdate {
	fu.mutation.SetFriendGroupFriendID(id)
	return fu
}

// SetFriendGroupFriend sets the "friend_group_friend" edge to the FriendGroup entity.
func (fu *FriendUpdate) SetFriendGroupFriend(f *FriendGroup) *FriendUpdate {
	return fu.SetFriendGroupFriendID(f.ID)
}

// Mutation returns the FriendMutation object of the builder.
func (fu *FriendUpdate) Mutation() *FriendMutation {
	return fu.mutation
}

// ClearOwnerUser clears the "owner_user" edge to the User entity.
func (fu *FriendUpdate) ClearOwnerUser() *FriendUpdate {
	fu.mutation.ClearOwnerUser()
	return fu
}

// ClearFriendUser clears the "friend_user" edge to the User entity.
func (fu *FriendUpdate) ClearFriendUser() *FriendUpdate {
	fu.mutation.ClearFriendUser()
	return fu
}

// ClearFriendGroupFriend clears the "friend_group_friend" edge to the FriendGroup entity.
func (fu *FriendUpdate) ClearFriendGroupFriend() *FriendUpdate {
	fu.mutation.ClearFriendGroupFriend()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FriendUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FriendUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FriendUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FriendUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FriendUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := friend.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FriendUpdate) check() error {
	if _, ok := fu.mutation.OwnerUserID(); fu.mutation.OwnerUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Friend.owner_user"`)
	}
	if _, ok := fu.mutation.FriendUserID(); fu.mutation.FriendUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Friend.friend_user"`)
	}
	if _, ok := fu.mutation.FriendGroupFriendID(); fu.mutation.FriendGroupFriendCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Friend.friend_group_friend"`)
	}
	return nil
}

func (fu *FriendUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(friend.Table, friend.Columns, sqlgraph.NewFieldSpec(friend.FieldID, field.TypeInt64))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(friend.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.DeletedAt(); ok {
		_spec.SetField(friend.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.Relationship(); ok {
		_spec.SetField(friend.FieldRelationship, field.TypeInt8, value)
	}
	if value, ok := fu.mutation.AddedRelationship(); ok {
		_spec.AddField(friend.FieldRelationship, field.TypeInt8, value)
	}
	if value, ok := fu.mutation.Remark(); ok {
		_spec.SetField(friend.FieldRemark, field.TypeString, value)
	}
	if value, ok := fu.mutation.LastTalkAt(); ok {
		_spec.SetField(friend.FieldLastTalkAt, field.TypeTime, value)
	}
	if fu.mutation.OwnerUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friend.OwnerUserTable,
			Columns: []string{friend.OwnerUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.OwnerUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friend.OwnerUserTable,
			Columns: []string{friend.OwnerUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.FriendUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friend.FriendUserTable,
			Columns: []string{friend.FriendUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FriendUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friend.FriendUserTable,
			Columns: []string{friend.FriendUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.FriendGroupFriendCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friend.FriendGroupFriendTable,
			Columns: []string{friend.FriendGroupFriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendgroup.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FriendGroupFriendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friend.FriendGroupFriendTable,
			Columns: []string{friend.FriendGroupFriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendgroup.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{friend.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FriendUpdateOne is the builder for updating a single Friend entity.
type FriendUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FriendMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FriendUpdateOne) SetUpdatedAt(t time.Time) *FriendUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fuo *FriendUpdateOne) SetDeletedAt(t time.Time) *FriendUpdateOne {
	fuo.mutation.SetDeletedAt(t)
	return fuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fuo *FriendUpdateOne) SetNillableDeletedAt(t *time.Time) *FriendUpdateOne {
	if t != nil {
		fuo.SetDeletedAt(*t)
	}
	return fuo
}

// SetOwnerUserID sets the "owner_user_id" field.
func (fuo *FriendUpdateOne) SetOwnerUserID(i int64) *FriendUpdateOne {
	fuo.mutation.SetOwnerUserID(i)
	return fuo
}

// SetNillableOwnerUserID sets the "owner_user_id" field if the given value is not nil.
func (fuo *FriendUpdateOne) SetNillableOwnerUserID(i *int64) *FriendUpdateOne {
	if i != nil {
		fuo.SetOwnerUserID(*i)
	}
	return fuo
}

// SetFriendUserID sets the "friend_user_id" field.
func (fuo *FriendUpdateOne) SetFriendUserID(i int64) *FriendUpdateOne {
	fuo.mutation.SetFriendUserID(i)
	return fuo
}

// SetNillableFriendUserID sets the "friend_user_id" field if the given value is not nil.
func (fuo *FriendUpdateOne) SetNillableFriendUserID(i *int64) *FriendUpdateOne {
	if i != nil {
		fuo.SetFriendUserID(*i)
	}
	return fuo
}

// SetRelationship sets the "relationship" field.
func (fuo *FriendUpdateOne) SetRelationship(i int8) *FriendUpdateOne {
	fuo.mutation.ResetRelationship()
	fuo.mutation.SetRelationship(i)
	return fuo
}

// SetNillableRelationship sets the "relationship" field if the given value is not nil.
func (fuo *FriendUpdateOne) SetNillableRelationship(i *int8) *FriendUpdateOne {
	if i != nil {
		fuo.SetRelationship(*i)
	}
	return fuo
}

// AddRelationship adds i to the "relationship" field.
func (fuo *FriendUpdateOne) AddRelationship(i int8) *FriendUpdateOne {
	fuo.mutation.AddRelationship(i)
	return fuo
}

// SetRemark sets the "remark" field.
func (fuo *FriendUpdateOne) SetRemark(s string) *FriendUpdateOne {
	fuo.mutation.SetRemark(s)
	return fuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (fuo *FriendUpdateOne) SetNillableRemark(s *string) *FriendUpdateOne {
	if s != nil {
		fuo.SetRemark(*s)
	}
	return fuo
}

// SetGroupID sets the "group_id" field.
func (fuo *FriendUpdateOne) SetGroupID(i int64) *FriendUpdateOne {
	fuo.mutation.SetGroupID(i)
	return fuo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (fuo *FriendUpdateOne) SetNillableGroupID(i *int64) *FriendUpdateOne {
	if i != nil {
		fuo.SetGroupID(*i)
	}
	return fuo
}

// SetLastTalkAt sets the "last_talk_at" field.
func (fuo *FriendUpdateOne) SetLastTalkAt(t time.Time) *FriendUpdateOne {
	fuo.mutation.SetLastTalkAt(t)
	return fuo
}

// SetNillableLastTalkAt sets the "last_talk_at" field if the given value is not nil.
func (fuo *FriendUpdateOne) SetNillableLastTalkAt(t *time.Time) *FriendUpdateOne {
	if t != nil {
		fuo.SetLastTalkAt(*t)
	}
	return fuo
}

// SetOwnerUser sets the "owner_user" edge to the User entity.
func (fuo *FriendUpdateOne) SetOwnerUser(u *User) *FriendUpdateOne {
	return fuo.SetOwnerUserID(u.ID)
}

// SetFriendUser sets the "friend_user" edge to the User entity.
func (fuo *FriendUpdateOne) SetFriendUser(u *User) *FriendUpdateOne {
	return fuo.SetFriendUserID(u.ID)
}

// SetFriendGroupFriendID sets the "friend_group_friend" edge to the FriendGroup entity by ID.
func (fuo *FriendUpdateOne) SetFriendGroupFriendID(id int64) *FriendUpdateOne {
	fuo.mutation.SetFriendGroupFriendID(id)
	return fuo
}

// SetFriendGroupFriend sets the "friend_group_friend" edge to the FriendGroup entity.
func (fuo *FriendUpdateOne) SetFriendGroupFriend(f *FriendGroup) *FriendUpdateOne {
	return fuo.SetFriendGroupFriendID(f.ID)
}

// Mutation returns the FriendMutation object of the builder.
func (fuo *FriendUpdateOne) Mutation() *FriendMutation {
	return fuo.mutation
}

// ClearOwnerUser clears the "owner_user" edge to the User entity.
func (fuo *FriendUpdateOne) ClearOwnerUser() *FriendUpdateOne {
	fuo.mutation.ClearOwnerUser()
	return fuo
}

// ClearFriendUser clears the "friend_user" edge to the User entity.
func (fuo *FriendUpdateOne) ClearFriendUser() *FriendUpdateOne {
	fuo.mutation.ClearFriendUser()
	return fuo
}

// ClearFriendGroupFriend clears the "friend_group_friend" edge to the FriendGroup entity.
func (fuo *FriendUpdateOne) ClearFriendGroupFriend() *FriendUpdateOne {
	fuo.mutation.ClearFriendGroupFriend()
	return fuo
}

// Where appends a list predicates to the FriendUpdate builder.
func (fuo *FriendUpdateOne) Where(ps ...predicate.Friend) *FriendUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FriendUpdateOne) Select(field string, fields ...string) *FriendUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Friend entity.
func (fuo *FriendUpdateOne) Save(ctx context.Context) (*Friend, error) {
	fuo.defaults()
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FriendUpdateOne) SaveX(ctx context.Context) *Friend {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FriendUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FriendUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FriendUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := friend.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FriendUpdateOne) check() error {
	if _, ok := fuo.mutation.OwnerUserID(); fuo.mutation.OwnerUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Friend.owner_user"`)
	}
	if _, ok := fuo.mutation.FriendUserID(); fuo.mutation.FriendUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Friend.friend_user"`)
	}
	if _, ok := fuo.mutation.FriendGroupFriendID(); fuo.mutation.FriendGroupFriendCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Friend.friend_group_friend"`)
	}
	return nil
}

func (fuo *FriendUpdateOne) sqlSave(ctx context.Context) (_node *Friend, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(friend.Table, friend.Columns, sqlgraph.NewFieldSpec(friend.FieldID, field.TypeInt64))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Friend.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, friend.FieldID)
		for _, f := range fields {
			if !friend.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != friend.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(friend.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.DeletedAt(); ok {
		_spec.SetField(friend.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.Relationship(); ok {
		_spec.SetField(friend.FieldRelationship, field.TypeInt8, value)
	}
	if value, ok := fuo.mutation.AddedRelationship(); ok {
		_spec.AddField(friend.FieldRelationship, field.TypeInt8, value)
	}
	if value, ok := fuo.mutation.Remark(); ok {
		_spec.SetField(friend.FieldRemark, field.TypeString, value)
	}
	if value, ok := fuo.mutation.LastTalkAt(); ok {
		_spec.SetField(friend.FieldLastTalkAt, field.TypeTime, value)
	}
	if fuo.mutation.OwnerUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friend.OwnerUserTable,
			Columns: []string{friend.OwnerUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.OwnerUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friend.OwnerUserTable,
			Columns: []string{friend.OwnerUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.FriendUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friend.FriendUserTable,
			Columns: []string{friend.FriendUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FriendUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friend.FriendUserTable,
			Columns: []string{friend.FriendUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.FriendGroupFriendCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friend.FriendGroupFriendTable,
			Columns: []string{friend.FriendGroupFriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendgroup.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FriendGroupFriendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friend.FriendGroupFriendTable,
			Columns: []string{friend.FriendGroupFriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendgroup.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Friend{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{friend.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
