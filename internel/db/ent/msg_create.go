// Code generated by ent, DO NOT EDIT.

package ent

import (
	"IM/internel/db/ent/msg"
	"IM/internel/db/ent/user"
	"IM/internel/types/enums"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MsgCreate is the builder for creating a Msg entity.
type MsgCreate struct {
	config
	mutation *MsgMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (mc *MsgCreate) SetCreatedAt(t time.Time) *MsgCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MsgCreate) SetNillableCreatedAt(t *time.Time) *MsgCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MsgCreate) SetUpdatedAt(t time.Time) *MsgCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MsgCreate) SetNillableUpdatedAt(t *time.Time) *MsgCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetDeletedAt sets the "deleted_at" field.
func (mc *MsgCreate) SetDeletedAt(t time.Time) *MsgCreate {
	mc.mutation.SetDeletedAt(t)
	return mc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mc *MsgCreate) SetNillableDeletedAt(t *time.Time) *MsgCreate {
	if t != nil {
		mc.SetDeletedAt(*t)
	}
	return mc
}

// SetSendAt sets the "send_at" field.
func (mc *MsgCreate) SetSendAt(t time.Time) *MsgCreate {
	mc.mutation.SetSendAt(t)
	return mc
}

// SetNillableSendAt sets the "send_at" field if the given value is not nil.
func (mc *MsgCreate) SetNillableSendAt(t *time.Time) *MsgCreate {
	if t != nil {
		mc.SetSendAt(*t)
	}
	return mc
}

// SetSessionType sets the "session_type" field.
func (mc *MsgCreate) SetSessionType(et enums.SessionType) *MsgCreate {
	mc.mutation.SetSessionType(et)
	return mc
}

// SetNillableSessionType sets the "session_type" field if the given value is not nil.
func (mc *MsgCreate) SetNillableSessionType(et *enums.SessionType) *MsgCreate {
	if et != nil {
		mc.SetSessionType(*et)
	}
	return mc
}

// SetSendID sets the "send_id" field.
func (mc *MsgCreate) SetSendID(i int64) *MsgCreate {
	mc.mutation.SetSendID(i)
	return mc
}

// SetReceiveID sets the "receive_id" field.
func (mc *MsgCreate) SetReceiveID(i int64) *MsgCreate {
	mc.mutation.SetReceiveID(i)
	return mc
}

// SetContentType sets the "content_type" field.
func (mc *MsgCreate) SetContentType(et enums.MessageType) *MsgCreate {
	mc.mutation.SetContentType(et)
	return mc
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (mc *MsgCreate) SetNillableContentType(et *enums.MessageType) *MsgCreate {
	if et != nil {
		mc.SetContentType(*et)
	}
	return mc
}

// SetAck sets the "ack" field.
func (mc *MsgCreate) SetAck(s string) *MsgCreate {
	mc.mutation.SetAck(s)
	return mc
}

// SetNillableAck sets the "ack" field if the given value is not nil.
func (mc *MsgCreate) SetNillableAck(s *string) *MsgCreate {
	if s != nil {
		mc.SetAck(*s)
	}
	return mc
}

// SetStatus sets the "status" field.
func (mc *MsgCreate) SetStatus(es enums.MessageStatus) *MsgCreate {
	mc.mutation.SetStatus(es)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *MsgCreate) SetNillableStatus(es *enums.MessageStatus) *MsgCreate {
	if es != nil {
		mc.SetStatus(*es)
	}
	return mc
}

// SetTextElem sets the "text_elem" field.
func (mc *MsgCreate) SetTextElem(s string) *MsgCreate {
	mc.mutation.SetTextElem(s)
	return mc
}

// SetNillableTextElem sets the "text_elem" field if the given value is not nil.
func (mc *MsgCreate) SetNillableTextElem(s *string) *MsgCreate {
	if s != nil {
		mc.SetTextElem(*s)
	}
	return mc
}

// SetURL sets the "url" field.
func (mc *MsgCreate) SetURL(s string) *MsgCreate {
	mc.mutation.SetURL(s)
	return mc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (mc *MsgCreate) SetNillableURL(s *string) *MsgCreate {
	if s != nil {
		mc.SetURL(*s)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MsgCreate) SetID(i int64) *MsgCreate {
	mc.mutation.SetID(i)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MsgCreate) SetNillableID(i *int64) *MsgCreate {
	if i != nil {
		mc.SetID(*i)
	}
	return mc
}

// SetSendUserID sets the "send_user" edge to the User entity by ID.
func (mc *MsgCreate) SetSendUserID(id int64) *MsgCreate {
	mc.mutation.SetSendUserID(id)
	return mc
}

// SetSendUser sets the "send_user" edge to the User entity.
func (mc *MsgCreate) SetSendUser(u *User) *MsgCreate {
	return mc.SetSendUserID(u.ID)
}

// SetReceiveUserID sets the "receive_user" edge to the User entity by ID.
func (mc *MsgCreate) SetReceiveUserID(id int64) *MsgCreate {
	mc.mutation.SetReceiveUserID(id)
	return mc
}

// SetReceiveUser sets the "receive_user" edge to the User entity.
func (mc *MsgCreate) SetReceiveUser(u *User) *MsgCreate {
	return mc.SetReceiveUserID(u.ID)
}

// Mutation returns the MsgMutation object of the builder.
func (mc *MsgCreate) Mutation() *MsgMutation {
	return mc.mutation
}

// Save creates the Msg in the database.
func (mc *MsgCreate) Save(ctx context.Context) (*Msg, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MsgCreate) SaveX(ctx context.Context) *Msg {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MsgCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MsgCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MsgCreate) defaults() {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := msg.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := msg.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.DeletedAt(); !ok {
		v := msg.DefaultDeletedAt
		mc.mutation.SetDeletedAt(v)
	}
	if _, ok := mc.mutation.SendAt(); !ok {
		v := msg.DefaultSendAt
		mc.mutation.SetSendAt(v)
	}
	if _, ok := mc.mutation.SessionType(); !ok {
		v := msg.DefaultSessionType
		mc.mutation.SetSessionType(v)
	}
	if _, ok := mc.mutation.ContentType(); !ok {
		v := msg.DefaultContentType
		mc.mutation.SetContentType(v)
	}
	if _, ok := mc.mutation.Ack(); !ok {
		v := msg.DefaultAck
		mc.mutation.SetAck(v)
	}
	if _, ok := mc.mutation.Status(); !ok {
		v := msg.DefaultStatus
		mc.mutation.SetStatus(v)
	}
	if _, ok := mc.mutation.TextElem(); !ok {
		v := msg.DefaultTextElem
		mc.mutation.SetTextElem(v)
	}
	if _, ok := mc.mutation.URL(); !ok {
		v := msg.DefaultURL
		mc.mutation.SetURL(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := msg.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MsgCreate) check() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Msg.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Msg.updated_at"`)}
	}
	if _, ok := mc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Msg.deleted_at"`)}
	}
	if _, ok := mc.mutation.SendAt(); !ok {
		return &ValidationError{Name: "send_at", err: errors.New(`ent: missing required field "Msg.send_at"`)}
	}
	if _, ok := mc.mutation.SessionType(); !ok {
		return &ValidationError{Name: "session_type", err: errors.New(`ent: missing required field "Msg.session_type"`)}
	}
	if v, ok := mc.mutation.SessionType(); ok {
		if err := msg.SessionTypeValidator(v); err != nil {
			return &ValidationError{Name: "session_type", err: fmt.Errorf(`ent: validator failed for field "Msg.session_type": %w`, err)}
		}
	}
	if _, ok := mc.mutation.SendID(); !ok {
		return &ValidationError{Name: "send_id", err: errors.New(`ent: missing required field "Msg.send_id"`)}
	}
	if _, ok := mc.mutation.ReceiveID(); !ok {
		return &ValidationError{Name: "receive_id", err: errors.New(`ent: missing required field "Msg.receive_id"`)}
	}
	if _, ok := mc.mutation.ContentType(); !ok {
		return &ValidationError{Name: "content_type", err: errors.New(`ent: missing required field "Msg.content_type"`)}
	}
	if v, ok := mc.mutation.ContentType(); ok {
		if err := msg.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "content_type", err: fmt.Errorf(`ent: validator failed for field "Msg.content_type": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Ack(); !ok {
		return &ValidationError{Name: "ack", err: errors.New(`ent: missing required field "Msg.ack"`)}
	}
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Msg.status"`)}
	}
	if _, ok := mc.mutation.TextElem(); !ok {
		return &ValidationError{Name: "text_elem", err: errors.New(`ent: missing required field "Msg.text_elem"`)}
	}
	if _, ok := mc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Msg.url"`)}
	}
	if _, ok := mc.mutation.SendUserID(); !ok {
		return &ValidationError{Name: "send_user", err: errors.New(`ent: missing required edge "Msg.send_user"`)}
	}
	if _, ok := mc.mutation.ReceiveUserID(); !ok {
		return &ValidationError{Name: "receive_user", err: errors.New(`ent: missing required edge "Msg.receive_user"`)}
	}
	return nil
}

func (mc *MsgCreate) sqlSave(ctx context.Context) (*Msg, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MsgCreate) createSpec() (*Msg, *sqlgraph.CreateSpec) {
	var (
		_node = &Msg{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(msg.Table, sqlgraph.NewFieldSpec(msg.FieldID, field.TypeInt64))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(msg.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(msg.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.DeletedAt(); ok {
		_spec.SetField(msg.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mc.mutation.SendAt(); ok {
		_spec.SetField(msg.FieldSendAt, field.TypeTime, value)
		_node.SendAt = value
	}
	if value, ok := mc.mutation.SessionType(); ok {
		_spec.SetField(msg.FieldSessionType, field.TypeEnum, value)
		_node.SessionType = value
	}
	if value, ok := mc.mutation.ContentType(); ok {
		_spec.SetField(msg.FieldContentType, field.TypeEnum, value)
		_node.ContentType = value
	}
	if value, ok := mc.mutation.Ack(); ok {
		_spec.SetField(msg.FieldAck, field.TypeString, value)
		_node.Ack = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(msg.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := mc.mutation.TextElem(); ok {
		_spec.SetField(msg.FieldTextElem, field.TypeString, value)
		_node.TextElem = value
	}
	if value, ok := mc.mutation.URL(); ok {
		_spec.SetField(msg.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if nodes := mc.mutation.SendUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msg.SendUserTable,
			Columns: []string{msg.SendUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SendID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ReceiveUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msg.ReceiveUserTable,
			Columns: []string{msg.ReceiveUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReceiveID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MsgCreateBulk is the builder for creating many Msg entities in bulk.
type MsgCreateBulk struct {
	config
	err      error
	builders []*MsgCreate
}

// Save creates the Msg entities in the database.
func (mcb *MsgCreateBulk) Save(ctx context.Context) ([]*Msg, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Msg, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MsgMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MsgCreateBulk) SaveX(ctx context.Context) []*Msg {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MsgCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MsgCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
