// Code generated by ent, DO NOT EDIT.

package ent

import (
	"IM/internel/db/ent/friend"
	"IM/internel/db/ent/friendgroup"
	"IM/internel/db/ent/predicate"
	"IM/internel/db/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FriendGroupUpdate is the builder for updating FriendGroup entities.
type FriendGroupUpdate struct {
	config
	hooks    []Hook
	mutation *FriendGroupMutation
}

// Where appends a list predicates to the FriendGroupUpdate builder.
func (fgu *FriendGroupUpdate) Where(ps ...predicate.FriendGroup) *FriendGroupUpdate {
	fgu.mutation.Where(ps...)
	return fgu
}

// SetUpdatedAt sets the "updated_at" field.
func (fgu *FriendGroupUpdate) SetUpdatedAt(t time.Time) *FriendGroupUpdate {
	fgu.mutation.SetUpdatedAt(t)
	return fgu
}

// SetDeletedAt sets the "deleted_at" field.
func (fgu *FriendGroupUpdate) SetDeletedAt(t time.Time) *FriendGroupUpdate {
	fgu.mutation.SetDeletedAt(t)
	return fgu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fgu *FriendGroupUpdate) SetNillableDeletedAt(t *time.Time) *FriendGroupUpdate {
	if t != nil {
		fgu.SetDeletedAt(*t)
	}
	return fgu
}

// SetOwnerID sets the "owner_id" field.
func (fgu *FriendGroupUpdate) SetOwnerID(i int64) *FriendGroupUpdate {
	fgu.mutation.SetOwnerID(i)
	return fgu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (fgu *FriendGroupUpdate) SetNillableOwnerID(i *int64) *FriendGroupUpdate {
	if i != nil {
		fgu.SetOwnerID(*i)
	}
	return fgu
}

// SetGroupName sets the "group_name" field.
func (fgu *FriendGroupUpdate) SetGroupName(s string) *FriendGroupUpdate {
	fgu.mutation.SetGroupName(s)
	return fgu
}

// SetNillableGroupName sets the "group_name" field if the given value is not nil.
func (fgu *FriendGroupUpdate) SetNillableGroupName(s *string) *FriendGroupUpdate {
	if s != nil {
		fgu.SetGroupName(*s)
	}
	return fgu
}

// AddFriendIDs adds the "friends" edge to the Friend entity by IDs.
func (fgu *FriendGroupUpdate) AddFriendIDs(ids ...int64) *FriendGroupUpdate {
	fgu.mutation.AddFriendIDs(ids...)
	return fgu
}

// AddFriends adds the "friends" edges to the Friend entity.
func (fgu *FriendGroupUpdate) AddFriends(f ...*Friend) *FriendGroupUpdate {
	ids := make([]int64, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fgu.AddFriendIDs(ids...)
}

// SetFriendGroupID sets the "friend_group" edge to the User entity by ID.
func (fgu *FriendGroupUpdate) SetFriendGroupID(id int64) *FriendGroupUpdate {
	fgu.mutation.SetFriendGroupID(id)
	return fgu
}

// SetFriendGroup sets the "friend_group" edge to the User entity.
func (fgu *FriendGroupUpdate) SetFriendGroup(u *User) *FriendGroupUpdate {
	return fgu.SetFriendGroupID(u.ID)
}

// Mutation returns the FriendGroupMutation object of the builder.
func (fgu *FriendGroupUpdate) Mutation() *FriendGroupMutation {
	return fgu.mutation
}

// ClearFriends clears all "friends" edges to the Friend entity.
func (fgu *FriendGroupUpdate) ClearFriends() *FriendGroupUpdate {
	fgu.mutation.ClearFriends()
	return fgu
}

// RemoveFriendIDs removes the "friends" edge to Friend entities by IDs.
func (fgu *FriendGroupUpdate) RemoveFriendIDs(ids ...int64) *FriendGroupUpdate {
	fgu.mutation.RemoveFriendIDs(ids...)
	return fgu
}

// RemoveFriends removes "friends" edges to Friend entities.
func (fgu *FriendGroupUpdate) RemoveFriends(f ...*Friend) *FriendGroupUpdate {
	ids := make([]int64, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fgu.RemoveFriendIDs(ids...)
}

// ClearFriendGroup clears the "friend_group" edge to the User entity.
func (fgu *FriendGroupUpdate) ClearFriendGroup() *FriendGroupUpdate {
	fgu.mutation.ClearFriendGroup()
	return fgu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fgu *FriendGroupUpdate) Save(ctx context.Context) (int, error) {
	fgu.defaults()
	return withHooks(ctx, fgu.sqlSave, fgu.mutation, fgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fgu *FriendGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := fgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fgu *FriendGroupUpdate) Exec(ctx context.Context) error {
	_, err := fgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fgu *FriendGroupUpdate) ExecX(ctx context.Context) {
	if err := fgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fgu *FriendGroupUpdate) defaults() {
	if _, ok := fgu.mutation.UpdatedAt(); !ok {
		v := friendgroup.UpdateDefaultUpdatedAt()
		fgu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fgu *FriendGroupUpdate) check() error {
	if _, ok := fgu.mutation.FriendGroupID(); fgu.mutation.FriendGroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FriendGroup.friend_group"`)
	}
	return nil
}

func (fgu *FriendGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fgu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(friendgroup.Table, friendgroup.Columns, sqlgraph.NewFieldSpec(friendgroup.FieldID, field.TypeInt64))
	if ps := fgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fgu.mutation.UpdatedAt(); ok {
		_spec.SetField(friendgroup.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fgu.mutation.DeletedAt(); ok {
		_spec.SetField(friendgroup.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := fgu.mutation.GroupName(); ok {
		_spec.SetField(friendgroup.FieldGroupName, field.TypeString, value)
	}
	if fgu.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   friendgroup.FriendsTable,
			Columns: []string{friendgroup.FriendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friend.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fgu.mutation.RemovedFriendsIDs(); len(nodes) > 0 && !fgu.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   friendgroup.FriendsTable,
			Columns: []string{friendgroup.FriendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friend.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fgu.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   friendgroup.FriendsTable,
			Columns: []string{friendgroup.FriendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friend.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fgu.mutation.FriendGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friendgroup.FriendGroupTable,
			Columns: []string{friendgroup.FriendGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fgu.mutation.FriendGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friendgroup.FriendGroupTable,
			Columns: []string{friendgroup.FriendGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{friendgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fgu.mutation.done = true
	return n, nil
}

// FriendGroupUpdateOne is the builder for updating a single FriendGroup entity.
type FriendGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FriendGroupMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fguo *FriendGroupUpdateOne) SetUpdatedAt(t time.Time) *FriendGroupUpdateOne {
	fguo.mutation.SetUpdatedAt(t)
	return fguo
}

// SetDeletedAt sets the "deleted_at" field.
func (fguo *FriendGroupUpdateOne) SetDeletedAt(t time.Time) *FriendGroupUpdateOne {
	fguo.mutation.SetDeletedAt(t)
	return fguo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fguo *FriendGroupUpdateOne) SetNillableDeletedAt(t *time.Time) *FriendGroupUpdateOne {
	if t != nil {
		fguo.SetDeletedAt(*t)
	}
	return fguo
}

// SetOwnerID sets the "owner_id" field.
func (fguo *FriendGroupUpdateOne) SetOwnerID(i int64) *FriendGroupUpdateOne {
	fguo.mutation.SetOwnerID(i)
	return fguo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (fguo *FriendGroupUpdateOne) SetNillableOwnerID(i *int64) *FriendGroupUpdateOne {
	if i != nil {
		fguo.SetOwnerID(*i)
	}
	return fguo
}

// SetGroupName sets the "group_name" field.
func (fguo *FriendGroupUpdateOne) SetGroupName(s string) *FriendGroupUpdateOne {
	fguo.mutation.SetGroupName(s)
	return fguo
}

// SetNillableGroupName sets the "group_name" field if the given value is not nil.
func (fguo *FriendGroupUpdateOne) SetNillableGroupName(s *string) *FriendGroupUpdateOne {
	if s != nil {
		fguo.SetGroupName(*s)
	}
	return fguo
}

// AddFriendIDs adds the "friends" edge to the Friend entity by IDs.
func (fguo *FriendGroupUpdateOne) AddFriendIDs(ids ...int64) *FriendGroupUpdateOne {
	fguo.mutation.AddFriendIDs(ids...)
	return fguo
}

// AddFriends adds the "friends" edges to the Friend entity.
func (fguo *FriendGroupUpdateOne) AddFriends(f ...*Friend) *FriendGroupUpdateOne {
	ids := make([]int64, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fguo.AddFriendIDs(ids...)
}

// SetFriendGroupID sets the "friend_group" edge to the User entity by ID.
func (fguo *FriendGroupUpdateOne) SetFriendGroupID(id int64) *FriendGroupUpdateOne {
	fguo.mutation.SetFriendGroupID(id)
	return fguo
}

// SetFriendGroup sets the "friend_group" edge to the User entity.
func (fguo *FriendGroupUpdateOne) SetFriendGroup(u *User) *FriendGroupUpdateOne {
	return fguo.SetFriendGroupID(u.ID)
}

// Mutation returns the FriendGroupMutation object of the builder.
func (fguo *FriendGroupUpdateOne) Mutation() *FriendGroupMutation {
	return fguo.mutation
}

// ClearFriends clears all "friends" edges to the Friend entity.
func (fguo *FriendGroupUpdateOne) ClearFriends() *FriendGroupUpdateOne {
	fguo.mutation.ClearFriends()
	return fguo
}

// RemoveFriendIDs removes the "friends" edge to Friend entities by IDs.
func (fguo *FriendGroupUpdateOne) RemoveFriendIDs(ids ...int64) *FriendGroupUpdateOne {
	fguo.mutation.RemoveFriendIDs(ids...)
	return fguo
}

// RemoveFriends removes "friends" edges to Friend entities.
func (fguo *FriendGroupUpdateOne) RemoveFriends(f ...*Friend) *FriendGroupUpdateOne {
	ids := make([]int64, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fguo.RemoveFriendIDs(ids...)
}

// ClearFriendGroup clears the "friend_group" edge to the User entity.
func (fguo *FriendGroupUpdateOne) ClearFriendGroup() *FriendGroupUpdateOne {
	fguo.mutation.ClearFriendGroup()
	return fguo
}

// Where appends a list predicates to the FriendGroupUpdate builder.
func (fguo *FriendGroupUpdateOne) Where(ps ...predicate.FriendGroup) *FriendGroupUpdateOne {
	fguo.mutation.Where(ps...)
	return fguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fguo *FriendGroupUpdateOne) Select(field string, fields ...string) *FriendGroupUpdateOne {
	fguo.fields = append([]string{field}, fields...)
	return fguo
}

// Save executes the query and returns the updated FriendGroup entity.
func (fguo *FriendGroupUpdateOne) Save(ctx context.Context) (*FriendGroup, error) {
	fguo.defaults()
	return withHooks(ctx, fguo.sqlSave, fguo.mutation, fguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fguo *FriendGroupUpdateOne) SaveX(ctx context.Context) *FriendGroup {
	node, err := fguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fguo *FriendGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := fguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fguo *FriendGroupUpdateOne) ExecX(ctx context.Context) {
	if err := fguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fguo *FriendGroupUpdateOne) defaults() {
	if _, ok := fguo.mutation.UpdatedAt(); !ok {
		v := friendgroup.UpdateDefaultUpdatedAt()
		fguo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fguo *FriendGroupUpdateOne) check() error {
	if _, ok := fguo.mutation.FriendGroupID(); fguo.mutation.FriendGroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FriendGroup.friend_group"`)
	}
	return nil
}

func (fguo *FriendGroupUpdateOne) sqlSave(ctx context.Context) (_node *FriendGroup, err error) {
	if err := fguo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(friendgroup.Table, friendgroup.Columns, sqlgraph.NewFieldSpec(friendgroup.FieldID, field.TypeInt64))
	id, ok := fguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FriendGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, friendgroup.FieldID)
		for _, f := range fields {
			if !friendgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != friendgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fguo.mutation.UpdatedAt(); ok {
		_spec.SetField(friendgroup.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fguo.mutation.DeletedAt(); ok {
		_spec.SetField(friendgroup.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := fguo.mutation.GroupName(); ok {
		_spec.SetField(friendgroup.FieldGroupName, field.TypeString, value)
	}
	if fguo.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   friendgroup.FriendsTable,
			Columns: []string{friendgroup.FriendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friend.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fguo.mutation.RemovedFriendsIDs(); len(nodes) > 0 && !fguo.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   friendgroup.FriendsTable,
			Columns: []string{friendgroup.FriendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friend.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fguo.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   friendgroup.FriendsTable,
			Columns: []string{friendgroup.FriendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friend.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fguo.mutation.FriendGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friendgroup.FriendGroupTable,
			Columns: []string{friendgroup.FriendGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fguo.mutation.FriendGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friendgroup.FriendGroupTable,
			Columns: []string{friendgroup.FriendGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FriendGroup{config: fguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{friendgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fguo.mutation.done = true
	return _node, nil
}
