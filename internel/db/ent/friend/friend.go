// Code generated by ent, DO NOT EDIT.

package friend

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the friend type in the database.
	Label = "friend"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldOwnerUserID holds the string denoting the owner_user_id field in the database.
	FieldOwnerUserID = "owner_user_id"
	// FieldFriendUserID holds the string denoting the friend_user_id field in the database.
	FieldFriendUserID = "friend_user_id"
	// FieldRelationship holds the string denoting the relationship field in the database.
	FieldRelationship = "relationship"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldGroupID holds the string denoting the group_id field in the database.
	FieldGroupID = "group_id"
	// FieldLastTalkAt holds the string denoting the last_talk_at field in the database.
	FieldLastTalkAt = "last_talk_at"
	// EdgeOwnerUser holds the string denoting the owner_user edge name in mutations.
	EdgeOwnerUser = "owner_user"
	// EdgeFriendUser holds the string denoting the friend_user edge name in mutations.
	EdgeFriendUser = "friend_user"
	// EdgeFriendGroupFriend holds the string denoting the friend_group_friend edge name in mutations.
	EdgeFriendGroupFriend = "friend_group_friend"
	// Table holds the table name of the friend in the database.
	Table = "t_friend"
	// OwnerUserTable is the table that holds the owner_user relation/edge.
	OwnerUserTable = "t_friend"
	// OwnerUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerUserInverseTable = "t_user"
	// OwnerUserColumn is the table column denoting the owner_user relation/edge.
	OwnerUserColumn = "owner_user_id"
	// FriendUserTable is the table that holds the friend_user relation/edge.
	FriendUserTable = "t_friend"
	// FriendUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	FriendUserInverseTable = "t_user"
	// FriendUserColumn is the table column denoting the friend_user relation/edge.
	FriendUserColumn = "friend_user_id"
	// FriendGroupFriendTable is the table that holds the friend_group_friend relation/edge.
	FriendGroupFriendTable = "t_friend"
	// FriendGroupFriendInverseTable is the table name for the FriendGroup entity.
	// It exists in this package in order to avoid circular dependency with the "friendgroup" package.
	FriendGroupFriendInverseTable = "t_friend_group"
	// FriendGroupFriendColumn is the table column denoting the friend_group_friend relation/edge.
	FriendGroupFriendColumn = "group_id"
)

// Columns holds all SQL columns for friend fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldOwnerUserID,
	FieldFriendUserID,
	FieldRelationship,
	FieldRemark,
	FieldGroupID,
	FieldLastTalkAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

// OrderOption defines the ordering options for the Friend queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByOwnerUserID orders the results by the owner_user_id field.
func ByOwnerUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerUserID, opts...).ToFunc()
}

// ByFriendUserID orders the results by the friend_user_id field.
func ByFriendUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFriendUserID, opts...).ToFunc()
}

// ByRelationship orders the results by the relationship field.
func ByRelationship(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelationship, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByGroupID orders the results by the group_id field.
func ByGroupID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupID, opts...).ToFunc()
}

// ByLastTalkAt orders the results by the last_talk_at field.
func ByLastTalkAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastTalkAt, opts...).ToFunc()
}

// ByOwnerUserField orders the results by owner_user field.
func ByOwnerUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByFriendUserField orders the results by friend_user field.
func ByFriendUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFriendUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByFriendGroupFriendField orders the results by friend_group_friend field.
func ByFriendGroupFriendField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFriendGroupFriendStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerUserTable, OwnerUserColumn),
	)
}
func newFriendUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FriendUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FriendUserTable, FriendUserColumn),
	)
}
func newFriendGroupFriendStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FriendGroupFriendInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FriendGroupFriendTable, FriendGroupFriendColumn),
	)
}
