// Code generated by ent, DO NOT EDIT.

package ent

import (
	"IM/internel/db/ent/msg"
	"IM/internel/db/ent/user"
	"IM/internel/types/enums"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Msg is the model entity for the Msg schema.
type Msg struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 发送时间
	SendAt time.Time `json:"send_at"`
	// 会话类型
	SessionType enums.SessionType `json:"session_type"`
	// 发送者 ID
	SendID int64 `json:"send_id"`
	// 发送者 ID
	ReceiveID int64 `json:"receive_id"`
	// 消息类型
	ContentType enums.MessageType `json:"content_type"`
	// 消息序列号
	Seq int32 `json:"seq"`
	// 消息状态
	Status enums.MessageStatus `json:"status"`
	// 文本信息
	TextElem string `json:"text_elem"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MsgQuery when eager-loading is set.
	Edges        MsgEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MsgEdges holds the relations/edges for other nodes in the graph.
type MsgEdges struct {
	// SendUser holds the value of the send_user edge.
	SendUser *User `json:"send_user,omitempty"`
	// ReceiveUser holds the value of the receive_user edge.
	ReceiveUser *User `json:"receive_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SendUserOrErr returns the SendUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MsgEdges) SendUserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.SendUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.SendUser, nil
	}
	return nil, &NotLoadedError{edge: "send_user"}
}

// ReceiveUserOrErr returns the ReceiveUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MsgEdges) ReceiveUserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.ReceiveUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.ReceiveUser, nil
	}
	return nil, &NotLoadedError{edge: "receive_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Msg) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case msg.FieldID, msg.FieldSendID, msg.FieldReceiveID, msg.FieldSeq:
			values[i] = new(sql.NullInt64)
		case msg.FieldSessionType, msg.FieldContentType, msg.FieldStatus, msg.FieldTextElem:
			values[i] = new(sql.NullString)
		case msg.FieldCreatedAt, msg.FieldUpdatedAt, msg.FieldDeletedAt, msg.FieldSendAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Msg fields.
func (m *Msg) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case msg.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int64(value.Int64)
		case msg.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case msg.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case msg.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				m.DeletedAt = value.Time
			}
		case msg.FieldSendAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field send_at", values[i])
			} else if value.Valid {
				m.SendAt = value.Time
			}
		case msg.FieldSessionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field session_type", values[i])
			} else if value.Valid {
				m.SessionType = enums.SessionType(value.String)
			}
		case msg.FieldSendID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field send_id", values[i])
			} else if value.Valid {
				m.SendID = value.Int64
			}
		case msg.FieldReceiveID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field receive_id", values[i])
			} else if value.Valid {
				m.ReceiveID = value.Int64
			}
		case msg.FieldContentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_type", values[i])
			} else if value.Valid {
				m.ContentType = enums.MessageType(value.String)
			}
		case msg.FieldSeq:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field seq", values[i])
			} else if value.Valid {
				m.Seq = int32(value.Int64)
			}
		case msg.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				m.Status = enums.MessageStatus(value.String)
			}
		case msg.FieldTextElem:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text_elem", values[i])
			} else if value.Valid {
				m.TextElem = value.String
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Msg.
// This includes values selected through modifiers, order, etc.
func (m *Msg) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QuerySendUser queries the "send_user" edge of the Msg entity.
func (m *Msg) QuerySendUser() *UserQuery {
	return NewMsgClient(m.config).QuerySendUser(m)
}

// QueryReceiveUser queries the "receive_user" edge of the Msg entity.
func (m *Msg) QueryReceiveUser() *UserQuery {
	return NewMsgClient(m.config).QueryReceiveUser(m)
}

// Update returns a builder for updating this Msg.
// Note that you need to call Msg.Unwrap() before calling this method if this Msg
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Msg) Update() *MsgUpdateOne {
	return NewMsgClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Msg entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Msg) Unwrap() *Msg {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Msg is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Msg) String() string {
	var builder strings.Builder
	builder.WriteString("Msg(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("send_at=")
	builder.WriteString(m.SendAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("session_type=")
	builder.WriteString(fmt.Sprintf("%v", m.SessionType))
	builder.WriteString(", ")
	builder.WriteString("send_id=")
	builder.WriteString(fmt.Sprintf("%v", m.SendID))
	builder.WriteString(", ")
	builder.WriteString("receive_id=")
	builder.WriteString(fmt.Sprintf("%v", m.ReceiveID))
	builder.WriteString(", ")
	builder.WriteString("content_type=")
	builder.WriteString(fmt.Sprintf("%v", m.ContentType))
	builder.WriteString(", ")
	builder.WriteString("seq=")
	builder.WriteString(fmt.Sprintf("%v", m.Seq))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", m.Status))
	builder.WriteString(", ")
	builder.WriteString("text_elem=")
	builder.WriteString(m.TextElem)
	builder.WriteByte(')')
	return builder.String()
}

// Msgs is a parsable slice of Msg.
type Msgs []*Msg
