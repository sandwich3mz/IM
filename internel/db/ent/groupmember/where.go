// Code generated by ent, DO NOT EDIT.

package groupmember

import (
	"IM/internel/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEQ(FieldDeletedAt, v))
}

// GroupID applies equality check predicate on the "group_id" field. It's identical to GroupIDEQ.
func GroupID(v int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEQ(FieldGroupID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEQ(FieldUserID, v))
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v int8) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEQ(FieldNickname, v))
}

// FaceURL applies equality check predicate on the "face_url" field. It's identical to FaceURLEQ.
func FaceURL(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEQ(FieldFaceURL, v))
}

// Count applies equality check predicate on the "count" field. It's identical to CountEQ.
func Count(v int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEQ(FieldCount, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEQ(FieldRemark, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldLTE(FieldDeletedAt, v))
}

// GroupIDEQ applies the EQ predicate on the "group_id" field.
func GroupIDEQ(v int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEQ(FieldGroupID, v))
}

// GroupIDNEQ applies the NEQ predicate on the "group_id" field.
func GroupIDNEQ(v int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldNEQ(FieldGroupID, v))
}

// GroupIDIn applies the In predicate on the "group_id" field.
func GroupIDIn(vs ...int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldIn(FieldGroupID, vs...))
}

// GroupIDNotIn applies the NotIn predicate on the "group_id" field.
func GroupIDNotIn(vs ...int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldNotIn(FieldGroupID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldNotIn(FieldUserID, vs...))
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v int8) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEQ(FieldNickname, v))
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v int8) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldNEQ(FieldNickname, v))
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...int8) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldIn(FieldNickname, vs...))
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...int8) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldNotIn(FieldNickname, vs...))
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v int8) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldGT(FieldNickname, v))
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v int8) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldGTE(FieldNickname, v))
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v int8) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldLT(FieldNickname, v))
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v int8) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldLTE(FieldNickname, v))
}

// FaceURLEQ applies the EQ predicate on the "face_url" field.
func FaceURLEQ(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEQ(FieldFaceURL, v))
}

// FaceURLNEQ applies the NEQ predicate on the "face_url" field.
func FaceURLNEQ(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldNEQ(FieldFaceURL, v))
}

// FaceURLIn applies the In predicate on the "face_url" field.
func FaceURLIn(vs ...string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldIn(FieldFaceURL, vs...))
}

// FaceURLNotIn applies the NotIn predicate on the "face_url" field.
func FaceURLNotIn(vs ...string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldNotIn(FieldFaceURL, vs...))
}

// FaceURLGT applies the GT predicate on the "face_url" field.
func FaceURLGT(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldGT(FieldFaceURL, v))
}

// FaceURLGTE applies the GTE predicate on the "face_url" field.
func FaceURLGTE(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldGTE(FieldFaceURL, v))
}

// FaceURLLT applies the LT predicate on the "face_url" field.
func FaceURLLT(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldLT(FieldFaceURL, v))
}

// FaceURLLTE applies the LTE predicate on the "face_url" field.
func FaceURLLTE(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldLTE(FieldFaceURL, v))
}

// FaceURLContains applies the Contains predicate on the "face_url" field.
func FaceURLContains(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldContains(FieldFaceURL, v))
}

// FaceURLHasPrefix applies the HasPrefix predicate on the "face_url" field.
func FaceURLHasPrefix(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldHasPrefix(FieldFaceURL, v))
}

// FaceURLHasSuffix applies the HasSuffix predicate on the "face_url" field.
func FaceURLHasSuffix(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldHasSuffix(FieldFaceURL, v))
}

// FaceURLEqualFold applies the EqualFold predicate on the "face_url" field.
func FaceURLEqualFold(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEqualFold(FieldFaceURL, v))
}

// FaceURLContainsFold applies the ContainsFold predicate on the "face_url" field.
func FaceURLContainsFold(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldContainsFold(FieldFaceURL, v))
}

// CountEQ applies the EQ predicate on the "count" field.
func CountEQ(v int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEQ(FieldCount, v))
}

// CountNEQ applies the NEQ predicate on the "count" field.
func CountNEQ(v int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldNEQ(FieldCount, v))
}

// CountIn applies the In predicate on the "count" field.
func CountIn(vs ...int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldIn(FieldCount, vs...))
}

// CountNotIn applies the NotIn predicate on the "count" field.
func CountNotIn(vs ...int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldNotIn(FieldCount, vs...))
}

// CountGT applies the GT predicate on the "count" field.
func CountGT(v int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldGT(FieldCount, v))
}

// CountGTE applies the GTE predicate on the "count" field.
func CountGTE(v int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldGTE(FieldCount, v))
}

// CountLT applies the LT predicate on the "count" field.
func CountLT(v int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldLT(FieldCount, v))
}

// CountLTE applies the LTE predicate on the "count" field.
func CountLTE(v int64) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldLTE(FieldCount, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.GroupMember {
	return predicate.GroupMember(sql.FieldContainsFold(FieldRemark, v))
}

// HasGroupUser applies the HasEdge predicate on the "group_user" edge.
func HasGroupUser() predicate.GroupMember {
	return predicate.GroupMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GroupUserTable, GroupUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupUserWith applies the HasEdge predicate on the "group_user" edge with a given conditions (other predicates).
func HasGroupUserWith(preds ...predicate.User) predicate.GroupMember {
	return predicate.GroupMember(func(s *sql.Selector) {
		step := newGroupUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMemberGroup applies the HasEdge predicate on the "member_group" edge.
func HasMemberGroup() predicate.GroupMember {
	return predicate.GroupMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MemberGroupTable, MemberGroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberGroupWith applies the HasEdge predicate on the "member_group" edge with a given conditions (other predicates).
func HasMemberGroupWith(preds ...predicate.Group) predicate.GroupMember {
	return predicate.GroupMember(func(s *sql.Selector) {
		step := newMemberGroupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GroupMember) predicate.GroupMember {
	return predicate.GroupMember(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GroupMember) predicate.GroupMember {
	return predicate.GroupMember(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GroupMember) predicate.GroupMember {
	return predicate.GroupMember(sql.NotPredicates(p))
}
