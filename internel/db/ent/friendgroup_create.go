// Code generated by ent, DO NOT EDIT.

package ent

import (
	"IM/internel/db/ent/friend"
	"IM/internel/db/ent/friendgroup"
	"IM/internel/db/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FriendGroupCreate is the builder for creating a FriendGroup entity.
type FriendGroupCreate struct {
	config
	mutation *FriendGroupMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (fgc *FriendGroupCreate) SetCreatedAt(t time.Time) *FriendGroupCreate {
	fgc.mutation.SetCreatedAt(t)
	return fgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fgc *FriendGroupCreate) SetNillableCreatedAt(t *time.Time) *FriendGroupCreate {
	if t != nil {
		fgc.SetCreatedAt(*t)
	}
	return fgc
}

// SetUpdatedAt sets the "updated_at" field.
func (fgc *FriendGroupCreate) SetUpdatedAt(t time.Time) *FriendGroupCreate {
	fgc.mutation.SetUpdatedAt(t)
	return fgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fgc *FriendGroupCreate) SetNillableUpdatedAt(t *time.Time) *FriendGroupCreate {
	if t != nil {
		fgc.SetUpdatedAt(*t)
	}
	return fgc
}

// SetDeletedAt sets the "deleted_at" field.
func (fgc *FriendGroupCreate) SetDeletedAt(t time.Time) *FriendGroupCreate {
	fgc.mutation.SetDeletedAt(t)
	return fgc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fgc *FriendGroupCreate) SetNillableDeletedAt(t *time.Time) *FriendGroupCreate {
	if t != nil {
		fgc.SetDeletedAt(*t)
	}
	return fgc
}

// SetOwnerID sets the "owner_id" field.
func (fgc *FriendGroupCreate) SetOwnerID(i int64) *FriendGroupCreate {
	fgc.mutation.SetOwnerID(i)
	return fgc
}

// SetGroupName sets the "group_name" field.
func (fgc *FriendGroupCreate) SetGroupName(s string) *FriendGroupCreate {
	fgc.mutation.SetGroupName(s)
	return fgc
}

// SetID sets the "id" field.
func (fgc *FriendGroupCreate) SetID(i int64) *FriendGroupCreate {
	fgc.mutation.SetID(i)
	return fgc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fgc *FriendGroupCreate) SetNillableID(i *int64) *FriendGroupCreate {
	if i != nil {
		fgc.SetID(*i)
	}
	return fgc
}

// AddFriendIDs adds the "friends" edge to the Friend entity by IDs.
func (fgc *FriendGroupCreate) AddFriendIDs(ids ...int64) *FriendGroupCreate {
	fgc.mutation.AddFriendIDs(ids...)
	return fgc
}

// AddFriends adds the "friends" edges to the Friend entity.
func (fgc *FriendGroupCreate) AddFriends(f ...*Friend) *FriendGroupCreate {
	ids := make([]int64, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fgc.AddFriendIDs(ids...)
}

// SetFriendGroupID sets the "friend_group" edge to the User entity by ID.
func (fgc *FriendGroupCreate) SetFriendGroupID(id int64) *FriendGroupCreate {
	fgc.mutation.SetFriendGroupID(id)
	return fgc
}

// SetFriendGroup sets the "friend_group" edge to the User entity.
func (fgc *FriendGroupCreate) SetFriendGroup(u *User) *FriendGroupCreate {
	return fgc.SetFriendGroupID(u.ID)
}

// Mutation returns the FriendGroupMutation object of the builder.
func (fgc *FriendGroupCreate) Mutation() *FriendGroupMutation {
	return fgc.mutation
}

// Save creates the FriendGroup in the database.
func (fgc *FriendGroupCreate) Save(ctx context.Context) (*FriendGroup, error) {
	fgc.defaults()
	return withHooks(ctx, fgc.sqlSave, fgc.mutation, fgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fgc *FriendGroupCreate) SaveX(ctx context.Context) *FriendGroup {
	v, err := fgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fgc *FriendGroupCreate) Exec(ctx context.Context) error {
	_, err := fgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fgc *FriendGroupCreate) ExecX(ctx context.Context) {
	if err := fgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fgc *FriendGroupCreate) defaults() {
	if _, ok := fgc.mutation.CreatedAt(); !ok {
		v := friendgroup.DefaultCreatedAt()
		fgc.mutation.SetCreatedAt(v)
	}
	if _, ok := fgc.mutation.UpdatedAt(); !ok {
		v := friendgroup.DefaultUpdatedAt()
		fgc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fgc.mutation.DeletedAt(); !ok {
		v := friendgroup.DefaultDeletedAt
		fgc.mutation.SetDeletedAt(v)
	}
	if _, ok := fgc.mutation.ID(); !ok {
		v := friendgroup.DefaultID()
		fgc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fgc *FriendGroupCreate) check() error {
	if _, ok := fgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FriendGroup.created_at"`)}
	}
	if _, ok := fgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FriendGroup.updated_at"`)}
	}
	if _, ok := fgc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "FriendGroup.deleted_at"`)}
	}
	if _, ok := fgc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`ent: missing required field "FriendGroup.owner_id"`)}
	}
	if _, ok := fgc.mutation.GroupName(); !ok {
		return &ValidationError{Name: "group_name", err: errors.New(`ent: missing required field "FriendGroup.group_name"`)}
	}
	if _, ok := fgc.mutation.FriendGroupID(); !ok {
		return &ValidationError{Name: "friend_group", err: errors.New(`ent: missing required edge "FriendGroup.friend_group"`)}
	}
	return nil
}

func (fgc *FriendGroupCreate) sqlSave(ctx context.Context) (*FriendGroup, error) {
	if err := fgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	fgc.mutation.id = &_node.ID
	fgc.mutation.done = true
	return _node, nil
}

func (fgc *FriendGroupCreate) createSpec() (*FriendGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &FriendGroup{config: fgc.config}
		_spec = sqlgraph.NewCreateSpec(friendgroup.Table, sqlgraph.NewFieldSpec(friendgroup.FieldID, field.TypeInt64))
	)
	if id, ok := fgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fgc.mutation.CreatedAt(); ok {
		_spec.SetField(friendgroup.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fgc.mutation.UpdatedAt(); ok {
		_spec.SetField(friendgroup.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fgc.mutation.DeletedAt(); ok {
		_spec.SetField(friendgroup.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := fgc.mutation.GroupName(); ok {
		_spec.SetField(friendgroup.FieldGroupName, field.TypeString, value)
		_node.GroupName = value
	}
	if nodes := fgc.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   friendgroup.FriendsTable,
			Columns: []string{friendgroup.FriendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friend.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fgc.mutation.FriendGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friendgroup.FriendGroupTable,
			Columns: []string{friendgroup.FriendGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FriendGroupCreateBulk is the builder for creating many FriendGroup entities in bulk.
type FriendGroupCreateBulk struct {
	config
	err      error
	builders []*FriendGroupCreate
}

// Save creates the FriendGroup entities in the database.
func (fgcb *FriendGroupCreateBulk) Save(ctx context.Context) ([]*FriendGroup, error) {
	if fgcb.err != nil {
		return nil, fgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fgcb.builders))
	nodes := make([]*FriendGroup, len(fgcb.builders))
	mutators := make([]Mutator, len(fgcb.builders))
	for i := range fgcb.builders {
		func(i int, root context.Context) {
			builder := fgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FriendGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fgcb *FriendGroupCreateBulk) SaveX(ctx context.Context) []*FriendGroup {
	v, err := fgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fgcb *FriendGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := fgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fgcb *FriendGroupCreateBulk) ExecX(ctx context.Context) {
	if err := fgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
