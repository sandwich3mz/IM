// Code generated by ent, DO NOT EDIT.

package ent

import (
	"IM/internel/db/ent/friend"
	"IM/internel/db/ent/friendgroup"
	"IM/internel/db/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Friend is the model entity for the Friend schema.
type Friend struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 当前登录用户 ID
	OwnerUserID int64 `json:"owner_user_id,string"`
	// 好友 ID
	FriendUserID int64 `json:"friend_user_id,string"`
	// 用户关系
	Relationship int8 `json:"relationship"`
	// 好友备注
	Remark string `json:"remark"`
	// 好友分组 ID
	GroupID int64 `json:"group_id,string"`
	// 最后交谈时间
	LastTalkAt time.Time `json:"last_talk_at"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FriendQuery when eager-loading is set.
	Edges        FriendEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FriendEdges holds the relations/edges for other nodes in the graph.
type FriendEdges struct {
	// OwnerUser holds the value of the owner_user edge.
	OwnerUser *User `json:"owner_user,omitempty"`
	// FriendUser holds the value of the friend_user edge.
	FriendUser *User `json:"friend_user,omitempty"`
	// FriendGroupFriend holds the value of the friend_group_friend edge.
	FriendGroupFriend *FriendGroup `json:"friend_group_friend,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OwnerUserOrErr returns the OwnerUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FriendEdges) OwnerUserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.OwnerUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.OwnerUser, nil
	}
	return nil, &NotLoadedError{edge: "owner_user"}
}

// FriendUserOrErr returns the FriendUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FriendEdges) FriendUserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.FriendUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.FriendUser, nil
	}
	return nil, &NotLoadedError{edge: "friend_user"}
}

// FriendGroupFriendOrErr returns the FriendGroupFriend value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FriendEdges) FriendGroupFriendOrErr() (*FriendGroup, error) {
	if e.loadedTypes[2] {
		if e.FriendGroupFriend == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: friendgroup.Label}
		}
		return e.FriendGroupFriend, nil
	}
	return nil, &NotLoadedError{edge: "friend_group_friend"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Friend) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case friend.FieldID, friend.FieldOwnerUserID, friend.FieldFriendUserID, friend.FieldRelationship, friend.FieldGroupID:
			values[i] = new(sql.NullInt64)
		case friend.FieldRemark:
			values[i] = new(sql.NullString)
		case friend.FieldCreatedAt, friend.FieldUpdatedAt, friend.FieldDeletedAt, friend.FieldLastTalkAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Friend fields.
func (f *Friend) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case friend.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int64(value.Int64)
		case friend.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case friend.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		case friend.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				f.DeletedAt = value.Time
			}
		case friend.FieldOwnerUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_user_id", values[i])
			} else if value.Valid {
				f.OwnerUserID = value.Int64
			}
		case friend.FieldFriendUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field friend_user_id", values[i])
			} else if value.Valid {
				f.FriendUserID = value.Int64
			}
		case friend.FieldRelationship:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field relationship", values[i])
			} else if value.Valid {
				f.Relationship = int8(value.Int64)
			}
		case friend.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				f.Remark = value.String
			}
		case friend.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				f.GroupID = value.Int64
			}
		case friend.FieldLastTalkAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_talk_at", values[i])
			} else if value.Valid {
				f.LastTalkAt = value.Time
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Friend.
// This includes values selected through modifiers, order, etc.
func (f *Friend) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryOwnerUser queries the "owner_user" edge of the Friend entity.
func (f *Friend) QueryOwnerUser() *UserQuery {
	return NewFriendClient(f.config).QueryOwnerUser(f)
}

// QueryFriendUser queries the "friend_user" edge of the Friend entity.
func (f *Friend) QueryFriendUser() *UserQuery {
	return NewFriendClient(f.config).QueryFriendUser(f)
}

// QueryFriendGroupFriend queries the "friend_group_friend" edge of the Friend entity.
func (f *Friend) QueryFriendGroupFriend() *FriendGroupQuery {
	return NewFriendClient(f.config).QueryFriendGroupFriend(f)
}

// Update returns a builder for updating this Friend.
// Note that you need to call Friend.Unwrap() before calling this method if this Friend
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Friend) Update() *FriendUpdateOne {
	return NewFriendClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Friend entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Friend) Unwrap() *Friend {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Friend is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Friend) String() string {
	var builder strings.Builder
	builder.WriteString("Friend(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(f.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("owner_user_id=")
	builder.WriteString(fmt.Sprintf("%v", f.OwnerUserID))
	builder.WriteString(", ")
	builder.WriteString("friend_user_id=")
	builder.WriteString(fmt.Sprintf("%v", f.FriendUserID))
	builder.WriteString(", ")
	builder.WriteString("relationship=")
	builder.WriteString(fmt.Sprintf("%v", f.Relationship))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(f.Remark)
	builder.WriteString(", ")
	builder.WriteString("group_id=")
	builder.WriteString(fmt.Sprintf("%v", f.GroupID))
	builder.WriteString(", ")
	builder.WriteString("last_talk_at=")
	builder.WriteString(f.LastTalkAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Friends is a parsable slice of Friend.
type Friends []*Friend
